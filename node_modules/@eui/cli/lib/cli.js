const inquirer = require('inquirer');

function start(inputConfig, callback) {

    if (inputConfig) {
        callback(inputConfig);
    } else {
        getDefaultInputs(function () {
            callback({
                "appType": arguments[0].appType,
                "appSubType": arguments[0].appSubType,
                "groupId": arguments[0].groupId,
                "artifactId": arguments[0].artifactId,
                "useYarn": arguments[0].useYarn,
                "npmInstall": arguments[0].npmInstall,
                "appOptions": arguments[0].appOptions
            });
        });
    }
}

function getDefaultInputs(callback) {
    var questions = [
        {
            type: 'list',
            name: 'appType',
            message: 'Select an application type :',
            choices: [
                { name: 'Angular', value: 'angular' },
                { name: 'Spring Boot web module', value: 'web-spring-boot' },
                { name: 'Maven web module (JEE Spring maven web module)', value: 'web-maven' },
                { name: 'full-stack (JEE Spring multi-maven) !!! JDK + Maven required !!!', value: 'full-stack' }
            ],
            default: 0,
            validate: function (value) {
                if (value.length) {
                    return true;
                }
            }
        },
        {
            name: 'groupId',
            type: 'input',
            message: 'Enter the groupId :',
            default: 'ec.europa.digit',
            validate: function (value) {
                if (value.length) {
                    return true;
                }
            },
            when: function(answers) {
                return (answers.appType === 'full-stack' || answers.appType === 'web-spring-boot');
            }
        },
        {
            name: 'artifactId',
            type: 'input',
            message: 'Enter the artifactId :',
            default: 'myapp',
            validate: function (value) {
                if (value.length) {
                    return true;
                }
            },
            when: function(answers) {
                return (answers.appType === 'full-stack' || answers.appType === 'web-spring-boot');
            }
        },
        {
            type: 'list',
            name: 'appSubType',
            message: 'Select an eUI integration type :',
            choices: [
                { name: 'default eUI - Stand-alone Front End app', value: 'default' },
                { name: 'Extended eUI - Front End app + multi feature modules with possible NPM publication !!ADMIN RIGHTS needed for Symlinks creation', value: 'extended' }
            ],
            default: 0,
            validate: function (value) {
                if (value.length) {
                    return true;
                }
            },
            when: function(answers) {
                return answers.appType !== 'html-styles';
            }
        },
        {
            type: 'checkbox',
            name: 'appOptions',
            message: 'Select one or more additional configuration options :',
            choices: [
                { name: 'OpenId Connect JWT implementation', value: 'openid-jwt' },
            ],
            when: function(answers) {
                return answers.appType !== 'html-styles';
            }
        },
        {
            name: 'useYarn',
            type: 'confirm',
            message: 'Use yarn :',
            default: true
        },
        {
            name: 'npmInstall',
            type: 'confirm',
            message: 'Install dependencies when the app is generated :',
            default: true
        }
    ];

    inquirer.prompt(questions).then(callback);
}

module.exports.start = start;
