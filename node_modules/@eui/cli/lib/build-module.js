const tools = require('@eui/tools/scripts/tools');
const config = require('./config');
const path = require('path');
const replaceInFiles = require('replace-in-files');

function start(cliConfig, callback) {

    build(cliConfig.name, cliConfig.scope, cliConfig.ngrx);

    if (callback) callback();
}

function build(name, scope, ngrx, targetPath, callback) {
    console.log(`Building module : ${scope}/${name}`);

    const moduleTargetPath = targetPath ? path.join(targetPath, name) : path.join(config.targetPath, name);

    console.log(`--cleaning target : ${moduleTargetPath}`);

    // Cleaning up
    tools.rmdirFull(moduleTargetPath);

    // setting source path
    var moduleSrcPath;
    const moduleBaseSrcPath = config.moduleBaseSrcPath;
    if (ngrx) {
        moduleSrcPath = config.moduleNgRxPath;
    } else {
        moduleSrcPath = config.modulePath;
    }

    // Generate module target
    tools.copydir(moduleBaseSrcPath, moduleTargetPath);
    tools.copydir(moduleSrcPath, moduleTargetPath);

    replaceInFiles({
        files: `${moduleTargetPath}/**/*.*`,
        from: /@module.name@/g,
        to: name,
      })
      .then(() => {
        return replaceInFiles({
            files: `${moduleTargetPath}/**/*.*`,
            from: /@module.scope@/g,
            to: scope,
          });
      })
      .then(() => {
        return replaceInFiles({
            files: `${moduleTargetPath}/**/*.*`,
            from: /@module.class.name@/g,
            to: tools.camelCaseString(name, '-', true),
          });
      })
      .catch(error => {
        console.error('Error occurred:', error);
      });

    // Replace package.json file
    tools.move(path.join(moduleTargetPath, '_package.json'),  path.join(moduleTargetPath,'package.json'));

    if (callback) callback();

}

module.exports.start = start;
module.exports.build = build;
