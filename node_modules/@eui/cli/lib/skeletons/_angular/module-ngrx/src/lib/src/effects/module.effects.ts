import { Injectable } from '@angular/core';
import { Effect, Actions } from '@ngrx/effects';
import { LOAD_DATA } from '../constants';
import { Observable } from 'rxjs/Observable';

import { UpdateEntitiesAction } from '../actions/index';

@Injectable()
export class @module.class.name@Effect {
    @Effect()
    myEffect: any = this.actions.ofType(LOAD_DATA)
                .switchMap(() => {
                    /**
                     * Simple example with a delay
                     * Here you probably want to return a service method (that itself returns an Observable)
                     * The Effect with automatically subscribe to the Observable
                     */
                    return Observable.of(true)
                            .delay(1000)
                            .map(() => {
                                // Dummy data (that could have come from backend)
                                const entities = [
                                    { id: 123, title: 'Entity from backend' },
                                    { id: 456, title: 'Entity from backend (2)' },
                                ];
                                return new UpdateEntitiesAction(entities);
                            });
                });

    constructor(private actions: Actions) { }
}
