import { createSelector } from 'reselect';

import { Action } from '../actions';
import { SELECT_ENTITY, UPDATE_ENTITIES, ADD_ENTITY, CLEAR_ENTITIES, namespace } from '../constants';

export interface State {
    selectedId: number;
    entities: any;
}

export const initialState: State = {
    selectedId: null,
    entities: null,
};

// ----reducers
const selectEntity = (state: State, action: Action) => {
    return Object.assign({}, state, { selectedId: action.payload });
};

const updateEntities = (state: State, action: Action) => {
    const newEntities = action.payload.reduce((acc: any, item: any) => {
        acc[item.id] = item;
        return acc;
    }, {});

    return { ...state, entities: Object.assign({}, state.entities, newEntities) };
};

const addEntity = (state: State, action: Action) => {
    const entities = state.entities ? Object.assign({}, state.entities) : {};
    entities[action.payload.id] = action.payload;
    return { ...state, entities };
};

const clearEntities = (state: State, action: Action): any => {
    return initialState;
};

const actionToReducerMap = {
    [SELECT_ENTITY]: selectEntity,
    [UPDATE_ENTITIES]: updateEntities,
    [ADD_ENTITY]: addEntity,
    [CLEAR_ENTITIES]: clearEntities,
};

export function reducers (state: State = initialState, action: Action) {
    if (actionToReducerMap [action.type]) {
        return actionToReducerMap [action.type](state, action);
    }

    return state;
}

// ----------------------
// State Selectors
// ----------------------
/**
 * This first state selector select the "slice"
 * of the store reserved to the module with its namespace.
 */
export const getModuleState = (state: any): State => state[namespace];

/**
 * Once the current module state is selected, we can access
 * different part of our Module State above
 */
export const getSelectedId = createSelector(getModuleState, (state: State) => state.selectedId);
export const getEntities = createSelector(getModuleState, (state: State) => state.entities);

/**
 * This selector converts the hash table we have { 1: { ... }, 2: { ... } } to and Array to be used in our Angular list loop (*ngFor)
 */
export const getListEntities = createSelector(getEntities, (entities) => entities ? Object.keys(entities).map(key => entities[key]) : []);

/**
 * Get the selected Entity, retrieving first the selectedId and then reading from the hash table
 */
export const getSelectedEntity = createSelector(getSelectedId, getEntities, (id, entities) => entities ? entities[id] : null);

// ----------------------
// AutoSave handler
// ----------------------
/**
 * Here you define a handler that will be executed each time the state is saved to local storage
 * You can decide which part of your state to save or all of it by returning the state
 */
export const autoSaveHandler = (state: State) => {
    // This would only save to local storage the selected id
    // return Object.assign({}, initialState, { selectedId: state.selectedId });

    // This will save the whole module state
    return state;
};
