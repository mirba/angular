import { Component, OnInit } from '@angular/core';
import { BuildingsService } from '../services/buildings.service';
import { Page } from '../../../shared/models/page.model';
import { Building } from '../models/building.model';

@Component({
    templateUrl: './buildings-overview.component.html',
    styleUrls: ['./buildings-overview.component.css'],
})
export class BuildingsOverviewComponent implements OnInit {
    buildingsPage: Page<Building>;

    serviceError: null;
    mode = null;
    modes: string [] = [];

    constructor(protected buildingsService: BuildingsService) {
    }

    ngOnInit() {
        this.loadBuildings();
    }

    loadBuildings(page?: Page<any>) {
        if (! page) {
            page = new Page<Building>(0, 1);
        }

        this.serviceError = null;
        this.pushMode('load');
        this.buildingsService.findBuildings(page).subscribe(buildingsPage => {
            // Introduce a fake delay here, just to show the "loading" state. Of course, in production this delay should be removed:
            setTimeout(() => {
                this.buildingsPage = buildingsPage;
                this.popMode();
            }, 2000);
        }, error => {
            this.serviceError = error;
            this.popMode();
        });
    }

    deleteBuilding(id: number) {
        this.buildingsService.deleteBuilding(id).subscribe(null, error => {
            alert(error.message);
        });
    }

    setMode(mode: string) {
        this.mode = mode;
        this.modes = [mode];
    }

    pushMode(mode: string) {
        this.modes.push(mode);
        this.mode = mode;
    }

    popMode() {
        this.modes.pop();
        const length = this.modes.length;
        if (length > 0) {
            this.mode = this.modes [length - 1];
        } else {
            this.mode = 'view';
        }
    }

    onPageChange(event) {
        this.loadBuildings(new Page(event.first, event.first + event.rows - 1));
    }
}
