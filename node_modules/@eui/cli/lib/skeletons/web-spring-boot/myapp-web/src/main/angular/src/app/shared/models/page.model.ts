import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';

export class Page<T> {
    items: T[];
    from: number;
    to: number;
    total: number;

    constructor(from?: number, to?: number) {
        if (typeof from !== 'undefined') {
            this.from = from;
        }

        if (typeof to !== 'undefined') {
            this.to = to;
        }
    }

    get pageSize(): number {
        return this.to - this.from + 1;
    }
    get pageNumber(): number {
        return this.from / this.pageSize;
    }

    static loadPage(url: string, http: HttpClient , requestedPage?: Page<any>): Observable<Page<any>> {
        let headers = {};
        if (requestedPage && requestedPage.from >= 0 && requestedPage.to >= 0) {
            headers = {
                'Content-Range': 'item ' + requestedPage.from + '-' + requestedPage.to + '/*'
            };
        }

        return http.get(url, {
            headers: new HttpHeaders(headers),
            observe: 'response'
        }).map((event: HttpResponse<any>) => {
            const response = <HttpResponse<any>> event;

            const page = new Page<any>();
            page.items = response.body;

            const range = response.headers.get('Content-Range');
            if (range) {
                const parts = range.split(' ');
                if (parts.length >= 2 && parts [0] === 'item') {
                    const itemParts = parts [1].split(/[-\/]/g);
                    const from = parseInt(itemParts [0], 10);
                    let to = parseInt(itemParts [1], 10);
                    if (to < from ) {
                        to = from;
                    }
                    page.total = parseInt(itemParts [2], 10);
                    page.from = from;
                    page.to = to;
                }
            }

            return page;
        });
    }
}
