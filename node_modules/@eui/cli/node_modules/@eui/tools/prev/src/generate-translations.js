const fs = require('fs');
const path = require('path');
const glob = require('glob');
const extend = require('extend');
const rimraf = require('rimraf');
const tools = require('./tools');

const rootFolder = path.join(path.resolve(process.cwd()), 'src/main/angular');
const nmFolder = path.join(path.resolve(process.cwd()), '../node_modules');

const langs = ['en', 'fr'];

const packages = tools.getPackages();

if (packages.length === 0) {
    return;
}
console.log('Building Translations files...\n');

const translations = {};
const destFolder = path.join(rootFolder, 'src/assets/i18n-compiled');

return Promise.resolve()
        .then(() => {
            if (!fs.existsSync(destFolder)) {
                return;
            }
            return new Promise((resolve, reject) => {
                console.log('Cleaning compiled translations...\n');
                rimraf(destFolder, () => setTimeout(resolve, 500));
            });
        })
        .then(() => {
            fs.mkdirSync(destFolder);

            langs.forEach((lang) => {
                console.log('Building translation for lang "' + lang + '"\n');
                // Add global translations
                let file = path.join(rootFolder, `src/assets/i18n-global/${lang}.json`);
                addTranslation(file, lang);

                // Add module translations
                packages.forEach((item) => {
                    console.log('...adding translation from module "' + item.package + '".');
                    file = path.join(nmFolder, `@opsys-ui/${item.package}/assets/i18n/${lang}.json`);
                    addTranslation(file, lang)
                });

                // Write final file
                if ({}.hasOwnProperty.call(translations, lang)) {
                    const dest = path.join(destFolder, `${lang}.json`);
                    const data = JSON.stringify(translations[lang]);
                    fs.writeFileSync(dest, data);
                }

                console.log('Translation for lang ' + lang + ' done. \n');
            });

            console.log('>>> All translations files generated.');
        })
        .catch((error) => {
            console.log('\Build failed. See below for errors.\n');
            console.log(error);
            process.exit(1);
        });


function addTranslation(file, lang) {
    // console.log(file);
    if (fs.existsSync(file)) {
        let data = fs.readFileSync(file, 'utf-8');
        try {
            data = JSON.parse(data);
            // console.log(data);
            translations[lang] = extend({}, translations[lang], data);
            // console.log(translations);
        } catch(e) {
            console.log('Error parsing lang JSON', file);
        }
    }
}
