'use strict';

const fs = require('fs');
const path = require('path');
const moment = require('moment');
const replace = require('replace-in-file');
const tools = require('../tools');

const root = process.cwd();
const rootSrc = 'src';

let paths = {
    root: root,
    rootSrc: rootSrc,
    appProperties: path.join(root, rootSrc, 'assets', 'app.properties'),
    appPropertiesJson: path.join(root, rootSrc, 'assets', 'app.properties.json'),
    packageJson: path.join(root, 'package.json'),
    config: path.join(root, rootSrc, 'config', 'index.ts'),
    pom: path.join(root, '../../../pom.xml'),
    pomOriginal: path.join(root, '../../../pom_original.xml'),
};

const setPaths = (targetFolder, srcFolder) => {
    const root = path.resolve(process.cwd(), targetFolder);
    const rootSrc =  srcFolder;

    paths = {
        root: root,
        rootSrc: rootSrc,
        appProperties: path.join(root, rootSrc, 'assets', 'app.properties'),
        appPropertiesJson: path.join(root, rootSrc, 'assets', 'app.properties.json'),
        packageJson: path.join(root, 'package.json'),
        config: path.join(root, rootSrc, 'config', 'index.ts'),
        pom: path.join(root, '../../../pom.xml'),
        pomOriginal: path.join(root, '../../../pom_original.xml'),
    };
}

const getAppVersion = () => {
    let version;

    try {
        const appPropertiesJson = require(paths.appPropertiesJson);
        version = appPropertiesJson.appVersion;
    } catch(e) {
        console.log('\Error getting version, taking package.json version instead \n');
        version = getAppVersionFromPkgJson();
    }

    return version;
}

const getAppVersionFromPkgJson = () => {
    const packageJson = require(paths.packageJson);
    return packageJson.version;
}

const getAppNextVersion = (isMaster = false) => {
    const regex = /(\d+)\.(\d+)\.(\d+)/.exec(getAppVersion());
    if (!regex) {
        throw new Error('Could not read APP_VERSION from configuration file.');
        process.exit(1);
    }

    const major = +regex[1];
    const minor = +regex[2];
    const fix = +regex[3];

    return isMaster ?
        `${major}.${minor + 1}.0` :
        `${major}.${minor}.${fix + 1}`;
}

const getAppProperties = () => {
    const appPropertiesJson = require(paths.appPropertiesJson);

    return JSON.stringify(appPropertiesJson, null, 4);
}






const exportAppInfos = (newVersion) => {
    if (!newVersion) {
        newVersion = getAppVersionFromPkgJson();
    };

    const appPropertiesJson = require(paths.appPropertiesJson);

    const appReleaseDate = moment(new Date()).format("DD/MM/YYYY HH:mm");

    appPropertiesJson.appVersion = newVersion;
    appPropertiesJson.appReleaseDate = appReleaseDate;
    appPropertiesJson.appInfos = `${newVersion} - ${appReleaseDate}`;

    // updating versions.json file
    fs.writeFileSync(paths.appPropertiesJson, JSON.stringify(appPropertiesJson, null, 4));

    // updating app.properties file for maven import
    fs.writeFileSync(paths.appProperties, `app.version=${newVersion}\napp.releaseDate=${appReleaseDate}`);
}

const exportAppPackagesVersions = (versions) => {
    if (!versions) {
        return;
    };

    const appPropertiesJson = require(paths.appPropertiesJson);

    appPropertiesJson.pkgVersions = versions;

    // updating versions.json file
    fs.writeFileSync(paths.appPropertiesJson, JSON.stringify(appPropertiesJson, null, 4));
}

const exportAppConfig = () => {
    const appPropertiesJson = require(paths.appPropertiesJson);

    let content = '/// ---build-replace\n';
    content = `${content}export const APP_VERSION = '${appPropertiesJson.appVersion}';\n`;
    content = `${content}export const APP_RELEASE_DATE = '${appPropertiesJson.appReleaseDate}';\n`;
    content = `${content}export const APP_INFOS = '${appPropertiesJson.appInfos}';\n`;
    content = `${content}export const VERSIONS = ${JSON.stringify(appPropertiesJson.pkgVersions, null, 4).replace(/"/g, '\'')};\n`;
    content = `${content}/// ---end-build-replace`;

    replace.sync({
        files: paths.config,
        from: /\/\/\/ ---build-replace[\n\r](.*[\n\r])*[\n\r]?\/\/\/ ---end-build-replace/,
        to: content,
    });
}

const exportPomVersion = () => {
    const appPropertiesJson = require(paths.appPropertiesJson);

    if (tools.isFileExists(paths.pomOriginal)) {
        tools.copy(paths.pomOriginal, paths.pom);

        replace.sync({
            files: paths.pom,
            from: /@app.version@/g,
            to: appPropertiesJson.appVersion,
        });
    }
}

module.exports = {
    setPaths,
    getAppVersion,
    getAppNextVersion,
    getAppProperties,
    exportAppInfos,
    exportAppPackagesVersions,
    exportAppConfig,
    exportPomVersion,
};
