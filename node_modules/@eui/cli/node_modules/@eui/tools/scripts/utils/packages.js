'use strict';

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const { argv } = require('yargs');

const config = require('../../config/project');
const { packages } = config || {};

// Make sure we don't execute scripts on certain packages
// Mainly on package.json from the "root" of the repository
const blackListed = ['eui', 'csdr'];

const listPackages = () => Object.keys(packages).map(p => config.packages[p]);

const validatePackage = (pkg) => {
    if (typeof pkg === 'undefined') {
        const paths = require('../../config/paths')({ insidePkgFolder: true });
        let pkgName = require(paths.pkgJson).name;
        pkgName = pkgName.slice(pkgName.indexOf('/') + 1);

        if (blackListed.indexOf(pkgName) >= 0) {
            throw Error(`No script execution allowed on package "${pkgName}".`);
        }

        return pkgName;
    }

    if (listPackages().map(p => p.name).indexOf(pkg) < 0) {
        throw Error(`Package "${pkg}" is not valid.`);
    }

    return pkg;
};

const getPackage = () => ({
    pkg: validatePackage(argv._[0]),
    insidePkgFolder: argv._.length === 0,
});

const nodeModulePackagesVersions = (packages = [], scopes = [], nmPath) => {
    console.log('\n\n---------------------------------------------------');
    console.log(chalk.cyan('Extracting Dependencies versions...'));
    console.log('---------------------------------------------------');

    const versions = {};
    nmPath = nmPath || path.resolve(process.cwd(), 'node_modules');

    scopes.forEach((scope) => {
        console.log(chalk.blue(`Adding packages from scope "${scope}"`));
        try {
            const data = fs.readdirSync(path.resolve(nmPath, scope)).map(pkg => {
                const name = `${scope}/${pkg}`;
                const folder = path.resolve(nmPath,  name);
                return { name, folder };
            });
            packages = [...packages, ...data];
        } catch(e) {}

    });

    if (packages.length === 0) {
        console.log(chalk.red('No package to read versions from.'));
        process.exit(1);
    }

    packages.forEach((pkg) => {
        const file = path.join(pkg.folder, 'package.json');
        addVersion(file, pkg.name);
    });

    return versions;

    // -----------------------

    function addVersion(file, pkg) {
        if (fs.existsSync(file)) {
            let data = fs.readFileSync(file, 'utf-8');
            try {
                data = JSON.parse(data);
                versions[pkg] = data.version;
            } catch(e) {
                console.log('Error parsing lang JSON', file);
            }
        }
    }
};

module.exports = {
    getPackage,
    listPackages,
    validatePackage,
    nodeModulePackagesVersions,
};
