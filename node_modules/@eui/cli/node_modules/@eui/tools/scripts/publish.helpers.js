'use strict';

const path = require('path');
const chalk = require('chalk');
const execa = require('execa');

const { doSendToSlack, processSucceded, processFailed } = require('./slack/slack');
const config = require('../config/project');

const aliases = config.npm && config.npm.registry && config.npm.registry.aliases;
const defaultRegistry = config.npm && config.npm.registry && config.npm.registry.default;

const publish = (registry, pkg, pkgFolder) => {
    console.log('\n\n---------------------------------------------------');
    console.log(chalk.cyan(`Publishing package "${pkg}" on ${registry}`));
    console.log('---------------------------------------------------');
    console.log(pkgFolder);

    let command = `npm publish ${pkgFolder} --registry ${registry}`;

    if (config.tag) {
        command += ` --tag ${config.tag}`;
    }

    const version = getPkgVersion(pkgFolder);

    return execa.shell(command, { stdio: 'inherit' })
        .then(() => {
            console.log('Packkge release succeeded!');

            if (doSendToSlack()) {
                processSucceded(pkg, version,  `[PACKAGE RELEASED]`, 'A new version of the package has been published to Nexus! :)');
            }
        })
        .catch((e) => {
            console.log(chalk.red(`Error publishing package "${pkg}".`));
            console.log(e);
            if (doSendToSlack()) {
                return processFailed(pkg, version,  e, `[PACKAGE RELEASE FAILED]`, 'Error while publishing the package to Nexus :(')
                    .then(() => {
                        process.exit(1);
                    });
            }
            process.exit(1);
        });
};

const publishMultipleRegistries = (registries, pkg, pkgFolder, options = { log: true }) => {
    if (options.log) {
        console.log('\n\n---------------------------------------------------');
        console.log(chalk.cyan(`Publishing package "${pkg}" on registry(ies):`));
        console.log(registries);
        console.log('---------------------------------------------------');
    }

    return Promise.resolve()
        .then(() => registries.reduce((promise, _registry) => (
            promise.then(() => publish(_registry, pkg, pkgFolder))
        ), Promise.resolve()));
};

function getPkgVersion(folder) {
    const pathPkgJson = path.resolve(folder, 'package.json');
    delete require.cache[pathPkgJson];
    require(pathPkgJson);
    const { version } = require(pathPkgJson);
    return version;
}

module.exports = {
    publish,
    publishMultipleRegistries,
    defaultRegistry,
    aliases,
    getPkgVersion,
};
