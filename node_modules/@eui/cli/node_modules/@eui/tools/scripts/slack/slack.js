'use strict';

const https = require('https');
const HttpsProxyAgent = require('https-proxy-agent');
const querystring = require('querystring');
const figures = require('figures');
const chalk = require('chalk');
const config = require('../../config/project');

let { msg, slackReport, slackChannel, slackEndPoint } = config;

/**
 * INFO:
 * environment variable has to be set on the Dev machine
 * http_proxy=http://<USER>:<PASSWORD>@ps-bxl-usr.cec.eu.int:8012
 */
const PROXY = process.env.http_proxy;
const HOST_SLACK = 'hooks.slack.com';
const DEFAULT_ENDPOINT = '/services/T5Q4N0TJS/B9Y32T1BL/0uWo1DjqDs0XtwCqwhJhqgFX';
const EUI_ENDPOINT = '/services/T5G2UE30W/B69LCQXV2/MnCwqb9Z8691tpvLLk6Yx4ER';
const DEFAULT_CHANNEL = '#br-timeline';
const TEST_CHANNEL = '#zzz-build-timeline';

const agent = PROXY ? new HttpsProxyAgent(PROXY) : void 0;
slackChannel = slackChannel || DEFAULT_CHANNEL;
slackEndPoint = slackEndPoint || DEFAULT_ENDPOINT;
// slackChannel = slackChannel || TEST_CHANNEL;
// slackEndPoint = slackEndPoint || EUI_ENDPOINT;

const sendMessage = (text, attachments, channel = slackChannel, path = slackEndPoint) => {
    return new Promise((resolve, reject) => {
        console.log('\n\n---------------------------------------------------');
        console.log(chalk.cyan(`Sending message to Slack...`));
        console.log(`Slack endPoint: ${path}`);
        console.log(`Slack channel: ${channel}`);
        console.log('---------------------------------------------------\n');

        const payload = {
            username: "eUI bot",
            channel
        };

        if (attachments) {
            payload.attachments = attachments.map(a => Object.assign({}, a, { fallback: a.fallback || a.pretext }))
        } else {
            payload.text = text;
        }

        // console.log(JSON.stringify(payload, null, 4));

        const postData  = JSON.stringify(payload);

        const options = {
            agent,
            path,
            hostname: HOST_SLACK,
            port: 443,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': postData.length
            }
        };

        const req = https.request(options, (res) => {
            if (res.statusCode === 200) {
                console.log(`\n${chalk.green(figures.tick)} Message sent successfully!`);
                resolve();
            } else {
                console.log(chalk.red(`Error sending message to slack.`));
                console.log('statusCode:', res.statusCode);
                console.log('headers', res.headers);
            }
        });

        req.on('error', (e) => {
            reject(e);
        });

        req.write(postData);
        req.end();
    });
};

const processSucceded = (scope, version, title, subtitle, customData = { fields: [], attachements: [] }) => {
    if (!title) {
        title = `[BUILD SUCCESS]`;
        subtitle = 'Great! Last build succeeded... The boat is floating :)'
    }

    const attachement = {
        pretext: title,
        title: subtitle,
        "color": "#26A65B",
        fields: getFields(scope, version).concat(customData.fields)
    };

    return sendMessage(null, [attachement, ...customData.attachements]);
};

const processFailed = (scope, version, error, title, subtitle, customData = { fields: [], attachements: [] }) => {
    if (!title) {
        title = `[BUILD FAILED]`;
        subtitle = 'Awwww! The last build failed... :(';
    }

    const attachements = [{
        pretext: title,
        title: subtitle,
        color: "#D91E18",
        fields: getFields(scope, version).concat(customData.fields)
    }];

    if (error) {
        attachements.push({
            title: 'Error',
            text: '```' + error + '````',
        });
    }

    return sendMessage(null, [...attachements, ...customData.attachements]);
};

const doSendToSlack = () => config.slackReport || config.slackChannel;

if (msg) {
    sendMessage(null, [{ pretext: msg }]);
}

// --------

function getFields(scope, version) {
    const fields = [];

    if (scope) {
        fields.push({
            "title": "Scope",
            "value": scope,
            "short": true
        });
    }

    if (version) {
        fields.push({
            "title": "Version",
            "value": version,
            "short": true
        });
    }

    return fields.length > 0 ? fields : void 0;
}

module.exports = { sendMessage, processSucceded, processFailed, doSendToSlack };