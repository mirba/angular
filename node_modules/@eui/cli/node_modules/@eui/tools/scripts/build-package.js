'use strict';

const path = require('path');
const fs = require('fs');
const chalk = require('chalk');

const tools = require('./tools');
const utilsPackages = require('./utils/packages');
const { doSendToSlack, processSucceded, processFailed } = require('./slack/slack');

const pkgInfo = utilsPackages.getPackage();
const paths = require('../config/paths')(pkgInfo);
const config = require('../config/project');

const { pkg } = pkgInfo;
const { skipLint, skipTest, skipCompile } = config;

if (config.packages[pkg].build && config.packages[pkg].build.exec === false) {
    console.log(chalk.red(`Build not allowed for package "${pkg}"`));
    return;
}

// Make sure the package is installed in our "packages" directory
if (!fs.existsSync(paths.pkgDirectory)) {
    return;
}

return Promise.resolve()
    .then(() => {
        console.log('\n\n---------------------------------------------------');
        console.log(chalk.cyan(`Building package: "${pkg}"...`));
        console.log('---------------------------------------------------');
    })
    .then(() => {
        const { deps } = config;
        if (deps === true) {
            return tools.runScript(`eui-scripts build-deps ${pkg}`);
        }
    })
    .then(() => {
        return tools.runScript(`eui-scripts clean-package ${pkg}`);
    })
    .then(() => {
        if (!skipLint) {
            console.log('-- Linting...');
            return tools.runScript(`tslint ${paths.pkgDirectory}/src/lib/src/**/*.ts`);
            console.log(chalk.green('----> OK'));
        }
    })
    .then(() => {
        if (!skipTest) {
            return tools.runScript(`eui-scripts build-tests ${pkg}`)
                .then(() => tools.runScript(`eui-scripts start-karma ${pkg} --single-run`));
        }
    })
    .then(() => {
        if (!skipCompile) {
            return tools.runScript(`eui-scripts compile-package ${pkg}`);
        }
    })
    .then(() => {
        console.log('\n---------------------------------------------------');
        console.log(chalk.green(" Build Success."));
        console.log('---------------------------------------------------');

        if (doSendToSlack()) {
            processSucceded(pkg);
        }
    })
    .catch((e) => {
        console.log('\n---------------------------------------------------');
        console.log(chalk.red("Build ERROR. See above for errors."));
        console.log('---------------------------------------------------');
        console.error(e);
        if (doSendToSlack()) {
            return processFailed(pkg, undefined, e)
                .then(() => {
                    process.exit(1);
                }).catch((e) => {
                    console.log(e);
                    process.exit(1);
                });
        }
        process.exit(1);
    });
