
'use strict';

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const rimraf = require('rimraf');
const extend = require('extend');
const arrify = require('arrify');

const argv = require('yargs').argv;

console.log('\n\n---------------------------------------------------');
console.log(chalk.cyan('Building translation file'));
console.log('---------------------------------------------------');

const rootSrcFolder = argv.rootSrcFolder ? argv.rootSrcFolder : 'src';
const rootFolder = argv.target ? path.resolve(process.cwd(), argv.target) : process.cwd();
const destFolder = argv.folder ? path.resolve(rootFolder, argv.folder) : path.resolve(rootFolder, rootSrcFolder, 'assets/i18n-compiled');
const globalTranslationsFolder = path.resolve(rootFolder, rootSrcFolder, 'assets/i18n-global');

const nmPath = path.resolve(rootFolder, 'node_modules');

let langs = ['en', 'fr'];
let packages = [];

if (argv.langs) {
    try {
        langs = arrify(argv.langs.split(','));
    } catch (e) {
        console.log(chalk.red('The lang parameter must be an Array of languages'));
    }
}

/**
 * We check if we passed scope to look for packages
 * ex: --scopes=opsys,opsys-ui,cc
 */
if (argv.scopes) {
    const scopes = arrify(argv.scopes.split(',')).map(s => '@' + s);
    scopes.forEach((scope) => {
        console.log(chalk.blue(`Adding packages from scope "${scope}"`));
        try {
            let files = fs.readdirSync(path.resolve(nmPath, scope)).map(pkg => path.resolve(nmPath,  `${scope}/${pkg}`))
            packages = [...packages, ...files];
        } catch (e) {}
    });
}

/**
 * We can also pass a list of packages directly
 * ex: --packages=my-package,my-other-package
 */
if (argv.packages) {
    packages = [...packages, ...arrify(argv.packages.split(','))];
}

if (packages.length === 0) {
    console.log(chalk.red('No package to build translations'));
    process.exit(1);
}

const translations = {};

console.log(`\n- langs: ${langs}`);
console.log(`- dest folder: ${destFolder}`);
console.log(`- total packages: ${packages.length}`);

return Promise.resolve()
        .then(() => {
            if (!fs.existsSync(destFolder)) {
                return;
            }
            return new Promise((resolve, reject) => {
                console.log('Cleaning compiled translations...\n');
                rimraf(destFolder, resolve);
            });
        })
        .then(() => {
            fs.mkdirSync(destFolder);

            langs.forEach((lang) => {
                console.log(`Building translation for lang: "${lang}"\n`);

                // Add global translations
                let file = path.join(globalTranslationsFolder, `${lang}.json`);
                addTranslation(file, lang);

                // Add module translations
                packages.forEach((pkg) => {
                    // console.log('...adding translation from module "' + pkg + '".');
                    file = path.join(pkg, `assets/i18n/${lang}.json`);
                    addTranslation(file, lang)
                });

                // Write final file
                if ({}.hasOwnProperty.call(translations, lang)) {
                    const dest = path.join(destFolder, `${lang}.json`);
                    const data = JSON.stringify(translations[lang]);
                    fs.writeFileSync(dest, data);
                }

                console.log('Translation for lang ' + lang + ' done. \n');
            });

            console.log('>>> All translations files generated.');
        })
        .catch((error) => {
            console.log('\Build failed. See below for errors.\n');
            console.log(error);
            process.exit(1);
        });


function addTranslation(file, lang) {
    if (fs.existsSync(file)) {
        let data = fs.readFileSync(file, 'utf-8');
        try {
            data = JSON.parse(data);
            translations[lang] = extend({}, translations[lang], data);
        } catch(e) {
            console.log('Error parsing lang JSON', file);
            console.log(e);
        }
    }
}
