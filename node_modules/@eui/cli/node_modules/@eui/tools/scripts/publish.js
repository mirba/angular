'use strict';

const path = require('path');
const execa = require('execa');
const chalk = require('chalk');

const {
    publish,
    publishMultipleRegistries,
    defaultRegistry,
    aliases } = require('./publish.helpers');
const utilsPackages = require('./utils/packages');
const config = require('../config/project');

const pkgInfo = utilsPackages.getPackage();
const paths = require('../config/paths')(pkgInfo);
let { registry, all } = config;

/**
 * Publish on registry provided through command argument
 * ex: npm run publish ux-commons -- --registry=https://my-registry.com
 */
if (typeof registry !== 'undefined') {
    return publish(registry, pkgInfo.pkg, paths.pkgDirectory);
}

/**
 * Publish on *ALL* registries
 * ex: npm run publish ux-commons -- --all
 */
if (typeof all !== 'undefined') {
    let registries = aliases;

    if (!registries) {
        registries = defaultRegistry && { default: config.npm.registry.default };
    }

    if (!registries) {
        console.log(chalk.red(`Trying to publish package "${pkgInfo.pkg}" on *all* registries but registry setting not found.`));
        return;
    }

    const listRegistries = Object.keys(registries)
        .map(k => registries[k])
        .filter(r => r.inPublishAll !== false)
        .map(r => r.uri);

    return publishMultipleRegistries(listRegistries, pkgInfo.pkg, paths.pkgDirectory);
}


/**
 * Publish on *SOME* registries
 * ex: npm run publish ux-commons -- --diplazium --ecdevops
 */
if (aliases) {
    const registries = Object.keys(aliases);
    const listRegistries = [];

    Object.keys(config).forEach((k) => {
        if (registries.indexOf(k) >= 0) {
            listRegistries.push(aliases[k].uri);
        }
    });

    if (listRegistries.length > 0) {
        return publishMultipleRegistries(listRegistries, pkgInfo.pkg, paths.pkgDirectory);
    }
}

/**
 * Publish on package registry, fallback to "default"
 * ex: npm run publish ux-commons
 */
registry = config.packages[pkgInfo.pkg].registry || (defaultRegistry && defaultRegistry.uri);

if (!registry) {
    console.log(chalk.red(`No registry defined to publish package "${pkgInfo.pkg}"`));
    return;
}

return publish(registry, pkgInfo.pkg, paths.pkgDirectory);
