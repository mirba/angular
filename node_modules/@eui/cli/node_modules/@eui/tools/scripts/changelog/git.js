'use strict';

var Bluebird = require('bluebird');
var CP       = Bluebird.promisifyAll(require('child_process'));
var path     = require('path');
var chalk    = require('chalk');

var SEPARATOR      = '===END===';
//var COMMIT_PATTERN = /^(\w*)(\(([\w\$\.\-\* ]*)\))?\: (.*)$/;
var COMMIT_PATTERN = /^(\w*)(\(.*)\)?\): (.*)$/;
var FORMAT         = '%H%n%s%n%b%n' + SEPARATOR;

/**
 * Get all commits from the last tag (or the first commit if no tags).
 * @param {Object} options - calculation options
 * @returns {Promise<Array<Object>>} array of parsed commit objects
 */
exports.getCommits = function (options) {
  options = options || {};
  return CP.execAsync('git describe --tags --abbrev=0', {cwd: path.join(options.packageRootPath)})
  .catch(function () {
    return '';
  })
  .then(function (tag) {
    tag = tag.toString().trim();
    var revisions = tag ? tag + '..HEAD' : '';

    //return CP.execAsync('git log -E --format=%H%n%s%n%b%n%an%n%ad%n===END===' + revisions + '--date=short');
    return CP.execAsync('git log -E --format=' + FORMAT + ' ' + revisions, {cwd: path.join(options.packageRootPath)});
  })
  .catch(function () {
    throw new Error('no commits found');
  })
  .then(function (commits) {
    return commits.split('\n' + SEPARATOR + '\n');
  })
  .map(function (raw) {
    if (!raw) {
      return null;
    }

    var lines = raw.split('\n');
    var commit = {};

    commit.hash = lines[0];
    commit.subject = lines[1];
    commit.body = lines[2];
    commit.footer = lines[3] + lines[4];

    var parsed = commit.subject.match(COMMIT_PATTERN);

    if (!parsed || !parsed[1]) {
      if (commit.subject.indexOf('Merge pull request') === -1) {
          console.log(chalk.red('----> INVALID COMMIT MESSAGE FORMAT : ' + commit.subject + '\n\n'));
      }
      return null;
    }

    commit.type = parsed[1].toLowerCase();
    commit.category = parsed[2].substr(1) || '';
    commit.subject = parsed[3];

    if (commit.type !== 'chore' && commit.subject.indexOf('lint') !== -1) {
        return null;
    }

    console.log(chalk.green('VALID COMMIT MESSAGE : \n ' + commit.type + '(' + commit.category + '): ' + commit.subject));
    console.log('\n');

    return commit;
  })
  .filter(function (commit) {
    if (!commit) {
      return false;
    }
    return options.exclude ? (options.exclude.indexOf(commit.type) === -1) : true;
  });
};
