// /*global jasmine, __karma__, window*/
Error.stackTraceLimit = 0; // "No stacktrace"" is usually best for testing.

// Uncomment to get full stacktrace output. Sometimes helpful, usually not.
// Error.stackTraceLimit = Infinity; //

jasmine.DEFAULT_TIMEOUT_INTERVAL = 1000;

// builtPaths: root paths for output ("built") files
// get from karma.config.js, then prefix with '/base/' (default is 'src/')
var builtPaths = (__karma__.config.builtPaths || ['src/'])
  .map(function (p) { return '/base/' + p; });

__karma__.loaded = function () { };

function isJsFile(path) {
  return path.slice(-3) == '.js';
}

function isSpecFile(path) {
  return /\.spec\.(.*\.)?js$/.test(path);
}

// Is a "built" file if is JavaScript file in one of the "built" folders
function isBuiltFile(path) {
  return isJsFile(path) &&
    builtPaths.reduce(function (keep, bp) {
      return keep || (path.substr(0, bp.length) === bp);
    }, false);
}

var allSpecFiles = Object.keys(window.__karma__.files)
  .filter(isSpecFile)
  .filter(isBuiltFile);

function initTestBed() {
  return Promise.all([
    System.import('@angular/core/testing'),
    System.import('@angular/platform-browser-dynamic/testing')
  ])

    .then(function (providers) {
      var coreTesting = providers[0];
      var browserTesting = providers[1];

      coreTesting.TestBed.initTestEnvironment(
        browserTesting.BrowserDynamicTestingModule,
        browserTesting.platformBrowserDynamicTesting());
    })
}

// Import all spec files and start karma
function initTesting() {
  return Promise.all(
    allSpecFiles.map(function (moduleName) {
      return System.import(moduleName);
    })
  )
    .then(__karma__.start, __karma__.error);
}

function karmaTestShim(baseURL, config) {
  var shims = config && config.shims || {};
  var map = {
    'system-loader': 'npm:@eui/tools/karma/systemjs-angular-loader.js',
    '@angular/animations': 'npm:@angular/animations/bundles/animations.umd.js',
    '@angular/core': 'npm:@angular/core/bundles/core.umd.js',
    '@angular/common': 'npm:@angular/common/bundles/common.umd.js',
    '@angular/common/http': 'npm:@angular/common/bundles/common-http.umd.js',
    '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',
    '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',
    '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',
    '@angular/http': 'npm:@angular/http/bundles/http.umd.js',
    '@angular/router': 'npm:@angular/router/bundles/router.umd.js',
    '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',
    '@angular/material': 'npm:@angular/material/bundles/material.umd.js',
    '@angular/material/autocomplete': 'npm:@angular/material/bundles/material-autocomplete.umd.js',
    '@angular/material/core': 'npm:@angular/material/bundles/material-core.umd.js',
    '@angular/material/form-field': 'npm:@angular/material/bundles/material-form-field.umd.js',
    // Testing bundles
    '@angular/core/testing': 'npm:@angular/core/bundles/core-testing.umd.js',
    '@angular/common/testing': 'npm:@angular/common/bundles/common-testing.umd.js',
    '@angular/common/http/testing': 'npm:@angular/common/bundles/common-http-testing.umd.js',
    '@angular/compiler/testing': 'npm:@angular/compiler/bundles/compiler-testing.umd.js',
    '@angular/platform-browser/testing': 'npm:@angular/platform-browser/bundles/platform-browser-testing.umd.js',
    '@angular/platform-browser-dynamic/testing': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic-testing.umd.js',
    '@angular/http/testing': 'npm:@angular/http/bundles/http-testing.umd.js',
    '@angular/router/testing': 'npm:@angular/router/bundles/router-testing.umd.js',
    '@angular/forms/testing': 'npm:@angular/forms/bundles/forms-testing.umd.js',
    '@eui/core': 'npm:@eui/core/dist/bundles/core.umd.js',
    '@eui/ux-core': 'npm:@eui/ux-core/dist/bundles/ux-core.umd.js',
    '@eui/ux-commons': 'npm:@eui/ux-commons/dist/bundles/ux-commons.umd.js',
    '@ngx-translate/core': 'npm:@ngx-translate/core/bundles/core.umd.js',
    '@ngrx/core': 'npm:@ngrx/core/bundles/core.umd.js',
    '@ngrx/store': 'npm:@ngrx/store/bundles/store.umd.js',
    '@ngrx/effects': 'npm:@ngrx/effects/bundles/effects.umd.js',
    '@ngrx/entity': 'npm:@ngrx/entity/bundles/entity.umd.js',
    '@ngrx/effects/testing': 'npm:@ngrx/effects/bundles/effects-testing.umd.js',
    '@angular/cdk/portal': 'npm:@angular/cdk/bundles/cdk-portal.umd.js',
    '@angular/cdk/keycodes': 'npm:@angular/cdk/bundles/cdk-keycodes.umd.min.js',
    '@angular/cdk/a11y': 'npm:@angular/cdk/bundles/cdk-a11y.umd.min.js',
    '@angular/cdk/coercion': 'npm:@angular/cdk/bundles/cdk-coercion.umd.min.js',
    '@angular/cdk/platform': 'npm:@angular/cdk/bundles/cdk-platform.umd.min.js',
    '@angular/cdk/overlay': 'npm:@angular/cdk/bundles/cdk-overlay.umd.min.js',
    '@angular/cdk/bidi': 'npm:@angular/cdk/bundles/cdk-bidi.umd.min.js',
    '@angular/cdk/scrolling': 'npm:@angular/cdk/bundles/cdk-scrolling.umd.min.js',
    'angular2-moment': 'npm:angular2-moment/index.js',
    '@ngui/auto-complete': 'npm:@ngui/auto-complete/dist/auto-complete.js',
    'arrify': 'npm:arrify/index.js',
    'cleave.js': 'npm:cleave.js/dist/cleave.js',
    'extend': 'npm:extend/index.js',
    'lodash': 'npm:lodash/lodash.js',
    'inherits': 'npm:inherits/inherits.js',
    'jasmine-marbles': 'npm:jasmine-marbles/bundles/jasmine-marbles.umd.js',
    'moment': 'npm:moment/moment.js',
    'moment-timezone': 'npm:moment-timezone/moment-timezone.js',
    'primeng/primeng': 'npm:primeng/primeng.js',
    'primeng/components/calendar/calendar': 'npm:primeng/components/calendar/calendar.js',
    'primeng/components/chart/chart': 'npm:primeng/components/chart/chart.js',
    'primeng/tooltip': 'npm:primeng/tooltip.js',
    'reselect': 'npm:reselect/lib/index.js',
    'reselect/lib': 'npm:reselect/lib/index.js',
    'tslib': 'npm:tslib/tslib.js',
    'rxjs': 'npm:rxjs',
    'tslib': 'npm:tslib/tslib.js',
    'util': 'npm:util/util.js',
    'twig': 'npm:twig/twig.js',
    'src': 'src',
  };
  Object.keys(shims).forEach(function(k) {
    map[k] = shims[k];
  });

  System.config({
    paths: {
      // paths serve as alias
      'npm:': 'node_modules/'
    },
    // Base URL for System.js calls. 'base/' is where Karma serves files from.
    baseURL: baseURL,
    // Extend usual application package list with test folder
    packages: {
      rxjs: { defaultExtension: 'js' },
      '': { defaultExtension: 'js' },
      src: {
        defaultExtension: 'js',
        meta: {
          './*.js': {
            loader: 'system-loader'
          }
        }
      }
    },
    map: map
  });

  initTestBed().then(initTesting);
}
