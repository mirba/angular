const chalk = require('chalk');
const figures = require('figures');
const replace = require('replace-in-file');

const logTitle = (msg) => {
    log(msg, 0);
}

const logInfo = (msg) => {
    log(msg, 1);
}

const logSuccess = (msg) => {
    if (!msg) msg = 'OK';
    log(msg, 2);
}

const logError = (msg) => {
    log(msg, 3);
}

const log = (msg, type) => {
    var prefix;
    if (type === 0 || !type) {
        prefix =  figures.play;
        console.info(chalk.cyan(prefix + ' ' + msg.toUpperCase()));
    }
    if (type === 1) {
        prefix =  figures.pointer + figures.pointer + figures.pointer;
        console.info(prefix + ' ' + msg);
    }
    if (type === 2) {
        prefix = figures.pointer + figures.pointer + figures.pointer + figures.pointer + figures.pointer + figures.pointer;
        console.info(chalk.green(prefix + ' ' + msg));
    }
    if (type === 3) {
        prefix = figures.pointer + figures.pointer + figures.pointer + figures.pointer + figures.pointer + figures.pointer;
        console.info(chalk.red(prefix + ' ' + msg));
    }
}


function replaceInFile(file, fromString, toString) {
  const fromRegExp = new RegExp(fromString, 'g');

  logInfo('replace in file: ' + file);

  return new Promise((resolve, reject) => {
    replace({
      files: file,
      from: fromRegExp,
      to: toString,
      disableGlobs: true,
    }, function (err, response) {
      if (err) {
        return reject(err);
      } else {
        return resolve(response);
      }
    })
  })
}

function compareValues(key, order='asc') {
  return function(a, b) {
    if(!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
        return 0;
    }

    const varA = (typeof a[key] === 'string') ?
      a[key].toUpperCase() : a[key];
    const varB = (typeof b[key] === 'string') ?
      b[key].toUpperCase() : b[key];

    let comparison = 0;
    if (varA > varB) {
      comparison = 1;
    } else if (varA < varB) {
      comparison = -1;
    }
    return (
      (order == 'desc') ? (comparison * -1) : comparison
    );
  };
}

function sortArray(arr, key, order) {
  return arr.sort(compareValues(key, order));
}

function removeArrayDuplicates(myArr, prop) {
  return myArr.filter((obj, pos, arr) => {
      return arr.map(mapObj => mapObj[prop]).indexOf(obj[prop]) === pos;
  });
}


module.exports.logTitle = logTitle;
module.exports.logInfo = logInfo;
module.exports.logSuccess = logSuccess;
module.exports.logError = logError;
module.exports.log = log;
module.exports.removeArrayDuplicates = removeArrayDuplicates;
module.exports.sortArray = sortArray;
module.exports.replaceInFile = replaceInFile;
