#!/usr/bin/env node

const cli = require('../lib/cli');
const build = require('../lib/build');
const postBuild = require('../lib/post-build');
const install = require('../lib/install');
const tools = require('@eui/tools/scripts/tools');
const chalk = require('chalk');
const figlet = require('figlet');
const path = require('path');

const cliModule = require('../lib/cli-module');
const buildModule = require('../lib/build-module');

const config = require('../lib/config');

const argv = require('minimist')(process.argv.slice(2));


console.log('\n\n');
console.log(
    chalk.yellow(
        figlet.textSync('eUI CLI', { horizontalLayout: 'full' })
    )
);
console.log(chalk.green('  v' + config.version + '\n'));


// checking compatibility of tooling installed
if (!tools.isSysConfigValid()) {
    return;
}

// remapping config if passed as argument - automated mode
var inputConfig;
if (argv.config) {
    const configArray = argv.config.split(',').map(item => {
        const x = item.split(':');
        var value = x[1];
        if (value === 'true') {
            value = true;
        }
        if (value === 'false') {
            value = false;
        }
        return {[x[0]]: value};
    });
    inputConfig = Object.assign({},...configArray);
}

// Detecting targetPath and create it if present as argument - local and automated mode
var targetPath;
if (argv.targetPath) {
    targetPath = path.join(config.targetPath,argv.targetPath);
    if (!tools.isDirExists(targetPath)) {
        tools.mkdir(targetPath);
    }
} else {
    targetPath = config.targetPath;
}



// Calling generator

console.log(chalk.cyan('Configuring your project : please answer the following : \n'));

if (!argv.m && !argv.v) {
    cli.start(inputConfig, function(cliConfig) {
        build.start(cliConfig, targetPath, function() {
           // setTimeout(function() {
              //  postBuild.start(cliConfig, targetPath, function() {
              //      if (cliConfig.npmInstall) {
								console.log("here");
                       // setTimeout(function() {
                            install.start(cliConfig, targetPath);
                      //  }, 2000);
              //      }
               // });
          //  }, 1000);
        });
    });

// module/sub-package generator
} else {
    if (argv.m) {
        console.log(chalk.cyan(' Generating package module... ====> answer the following questions : \n'));

        cliModule.start(function(cliConfig) {
            buildModule.start(cliConfig, function() {
            });
        });
    }

    if (argv.v) {
        console.log('Current eUI CLI version installed : ' + config.version);
    }
}
