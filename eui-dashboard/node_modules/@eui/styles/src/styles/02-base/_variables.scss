// Variables for interpolation

$ux-assets-path: '../assets' !default;

// RESPONSIVE BREAKPOINTS

// TODO ECL : check ECL grid breakpoints and match those / implication at Angular level !!!

// breakpoints map is exact match with bootstrap (see in vendors/bootstrap/bootstrap/_variables.scss)
$ux-grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px
) !default;

// TODO general : do we still need this ? in Opsys there're cases where it's used (OE, to be checked)

$ux-grid-breakpoints-with-tweakpoints: (
    xs: 0,
    xs-t1: 480px, // Tweak point
    sm: 576px,
    sm-t1: 680px, // Tweak point
    md: 768px,
    lg: 992px,
    lg-t1: 1100px, // Tweak point
    xl: 1200px,
    xl-t1: 1300px, // Tweak point
    xxl: 1400px, // Tweak point
    xxl-t1: 1650px, // Tweak point
) !default;

//bootstrap naming
$xs: new-breakpoint(min-width map-get($ux-grid-breakpoints, 'xs') max-width map-get($ux-grid-breakpoints, 'sm') - 1) !default;
$sm: new-breakpoint(min-width map-get($ux-grid-breakpoints, 'sm') max-width map-get($ux-grid-breakpoints, 'md') - 1) !default;
$md: new-breakpoint(min-width map-get($ux-grid-breakpoints, 'md') max-width map-get($ux-grid-breakpoints, 'lg') - 1) !default;
$lg: new-breakpoint(min-width map-get($ux-grid-breakpoints, 'lg') max-width map-get($ux-grid-breakpoints, 'xl') - 1) !default;
$xl: new-breakpoint(min-width map-get($ux-grid-breakpoints, 'xl') max-width map-get($ux-grid-breakpoints, 'xxl') - 1) !default;
$xxl: new-breakpoint(min-width map-get($ux-grid-breakpoints, 'xxl')) !default;

// human naming
$ux-bkp-mobile-down: $xs !default;
$ux-bkp-mobile: new-breakpoint(max-width map-get($ux-grid-breakpoints, 'md') - 1) !default;
$ux-bkp-mobile-up: new-breakpoint(min-width map-get($ux-grid-breakpoints, 'md')) !default;
$ux-bkp-tablet: $md !default;
$ux-bkp-desktop-down: new-breakpoint(max-width map-get($ux-grid-breakpoints, 'lg') - 1) !default;
$ux-bkp-desktop: $lg !default;
$ux-bkp-desktop-up: new-breakpoint(min-width map-get($ux-grid-breakpoints, 'lg')) !default;
$ux-bkp-desktop-wide: $xxl !default;

// TYPOGRAPHY // TODO ECL : should we apply Arial all over the place or keep Roboto ? to be decided
$ux-font-family: ('eui-default', Arial, 'Helvetica Neue', Helvetica, sans-serif,) !default;
$ux-font-family-light: ('eui-light', 'Helvetica Neue', Helvetica, sans-serif,) !default;
$ux-font-family-bold: ('eui-bold', 'Helvetica Neue', Helvetica, sans-serif,) !default;

// FONT SIZING
$ux-font-size: 14px !default;

$ux-font-size-h1-px: 32px !default;
$ux-font-size-h2-px: 28px !default;
$ux-font-size-h3-px: 24px !default;
$ux-font-size-h4-px: 20px !default;
$ux-font-size-h5-px: 16px !default;
$ux-font-size-h6-px: 14px !default;
$ux-font-size-h7-px: 12px !default;
$ux-font-size-h8-px: 10px !default;
$ux-font-size-h9-px: 8px !default;

$ux-font-size-h1: to-rem($ux-font-size-h1-px) !default;
$ux-font-size-h2: to-rem($ux-font-size-h2-px) !default;
$ux-font-size-h3: to-rem($ux-font-size-h3-px) !default;
$ux-font-size-h4: to-rem($ux-font-size-h4-px) !default;
$ux-font-size-h5: to-rem($ux-font-size-h5-px) !default;
$ux-font-size-h6: to-rem($ux-font-size-h6-px) !default;
$ux-font-size-h7: to-rem($ux-font-size-h7-px) !default;
$ux-font-size-h8: to-rem($ux-font-size-h8-px) !default;
$ux-font-size-h9: to-rem($ux-font-size-h9-px) !default;

// $ux-font-size-h1: map-get($ecl-font-size, 'xxl') !default;
// $ux-font-size-h2: map-get($ecl-font-size, 'xl') !default;
// $ux-font-size-h3: map-get($ecl-font-size, 'l') !default;
// $ux-font-size-h4: map-get($ecl-font-size, 'm') !default;
// $ux-font-size-h5: map-get($ecl-font-size, 's') !default;
// $ux-font-size-h6: map-get($ecl-font-size, 'xs') !default; // TODO ECL : H6 should be set to 1 rem - the m font-size is way too different than the m spacing ?
// $ux-font-size-h7: map-get($ecl-font-size, 'xxs') !default;
// $ux-font-size-h8: map-get($ecl-font-size, 'xxxs') !default;
// $ux-font-size-h9: map-get($ecl-font-size, 'xxxs') !default; // TODO ECL : need an extra below size

// SPACING : from Bootstrap
$ux-spacer: 1.25rem !default; // TODO ECL : check why we jump from 1rem to 1.66rem from s to m spacing ???
$ux-line-height-base: 1.25 !default;

$ux-spacer-0: 0 !default;
$ux-spacer-1: map-get($ecl-spacing, 'xxxs') !default;
$ux-spacer-2: map-get($ecl-spacing, 'xxs') !default;
$ux-spacer-3: map-get($ecl-spacing, 'xs') !default;
$ux-spacer-4: map-get($ecl-spacing, 's') !default;
$ux-spacer-5: map-get($ecl-spacing, 'm') !default;
$ux-spacer-6: map-get($ecl-spacing, 'l') !default;
$ux-spacer-7: map-get($ecl-spacing, 'xl') !default;

// Human naming based on $ux-spacers defined
$ux-spacer-none: 0 !default;
$ux-spacer-tiniest: map-get($ecl-spacing, 'xxxs') * 0.5 !default;
$ux-spacer-tinier: map-get($ecl-spacing, 'xxxs') * 0.75 !default;
$ux-spacer-tiny: $ux-spacer-1 !default;
$ux-spacer-small: $ux-spacer-2 !default;
$ux-spacer-medium: $ux-spacer-3 !default;
$ux-spacer-large: $ux-spacer-4 !default;
$ux-spacer-xlarge: $ux-spacer-5 !default;
$ux-spacer-xxlarge: $ux-spacer-6 !default;
$ux-spacer-xxxlarge: $ux-spacer-7 !default;

// LAYOUT
$ux-layout-largedesktop-body-width: 1400px !default;
$ux-layout-footer-height: 6rem !default;
$ux-layout-footer-height-mobile: 2rem !default;
$ux-layout-header-height: 90px !default;
$ux-layout-nav-height: 50px !default;
$ux-layout-sidebar-width: 250px !default;
$ux-layout-sidebar-tablet-width: 200px !default;
$ux-layout-sidebar-mobile-width: 150px !default;

// z-index
$ux-z-index-auto: auto;
$ux-z-index-zero: 0;
$ux-z-index-nav: 10;
$ux-z-index-modal: 1050;
$ux-z-index-modal-backdrop: 1049;
$ux-z-index-footer-action-bar: 1048;
$ux-z-index-highlighted: 1047;
$ux-z-index-btn-floating: 1046;
$ux-z-index-overlay: 1045;
$ux-z-index-sidebar: 1044;
$ux-z-index-max: 9999;
