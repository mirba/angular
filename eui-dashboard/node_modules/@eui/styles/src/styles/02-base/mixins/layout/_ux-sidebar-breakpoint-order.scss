@function get-sidebar-breakpoint($grid-breakpoint) {
    @if map-has-key($ux-grid-breakpoints, $grid-breakpoint) {
        @return map-get($ux-grid-breakpoints, $grid-breakpoint);
    }
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$grid-breakpoint}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}
@function get-flex-order-number($order-code) {
    // The order-code is the Bootstrap flex order code: first, last, unordered.
    @if $order-code == 'first' {
        @return -1;
    }
    @if $order-code == 'unordered' {
        @return 0;
    }
    @if $order-code == 'last' {
        @return 1;
    }
}

/*
    This mixin is used to reposition panels in case there is not enough space left when the sidebar is opened.
    Parameters:
    * The name of the Bootstrap grid breakpoint.
    * The CSS selector for the affected panel, e.g.: .description-panel
    * The grid positioning code for the flex Bootstrap grid in case the sidebar is open: first, last, or unordered.
    * The grid positioning code for the flex Bootstrap grid in case the sidebar is closed: first, last, or unordered.
*/
@mixin sidebar-breakpoint-order($grid-breakpoint, $selector, $sidebar-open-order, $sidebar-closed-order) {
    $open-order: get-flex-order-number($sidebar-open-order);
    $closed-order: get-flex-order-number($sidebar-closed-order);

    /deep/ {
        @media (min-width: get-sidebar-breakpoint($grid-breakpoint)) {
            .sidebar-state-open {
                #{$selector} {
                    -webkit-box-ordinal-group: $open-order + 1;
                    -ms-flex-order: $open-order;
                    order: $open-order;
                }
            }
        }
        @media (min-width: get-sidebar-breakpoint($grid-breakpoint) + $width-sidebar) {
            .sidebar-state-open {
                #{$selector} {
                    -webkit-box-ordinal-group: $closed-order + 1;
                    -ms-flex-order: $closed-order;
                    order: $closed-order;
                }
            }
        }
    }
}
