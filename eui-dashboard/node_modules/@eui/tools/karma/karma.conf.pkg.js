'use strict';

const config = require('../config/project');

function get(config, pkg, inputOpt) {

    const DEFAULT_OPTS = {
        files: [],
        basePath: '../../../',
        packageRootPath: 'src/packages/',
        shimRootPath: null
    };

    const opt = Object.assign(DEFAULT_OPTS, inputOpt);

    var shimRootPath = opt.packageRootPath + pkg;

    if (opt.shimRootPath) {
        shimRootPath = opt.shimRootPath;
    }

    // transpiled app JS and map files
    const libPath = opt.packageRootPath + pkg + '/';

    const FILES = [
        // System.js for module loading
        'node_modules/systemjs/dist/system.src.js',

        // Polyfills
        'node_modules/core-js/client/shim.js',
        'node_modules/systemjs/dist/system-polyfills.js',

        // zone.js
        'node_modules/zone.js/dist/zone.js',
        'node_modules/zone.js/dist/long-stack-trace-zone.js',
        'node_modules/zone.js/dist/proxy.js',
        'node_modules/zone.js/dist/sync-test.js',
        'node_modules/zone.js/dist/jasmine-patch.js',
        'node_modules/zone.js/dist/async-test.js',
        'node_modules/zone.js/dist/fake-async-test.js',

        // RxJs
        { pattern: 'node_modules/rxjs/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/rxjs/**/*.js.map', included: false, watched: false },

        { pattern: 'node_modules/@ngrx/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/@ngx-translate/core/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/angular2-moment/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/arrify/index.js', included: false, watched: false },
        { pattern: 'node_modules/cleave.js/dist/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/extend/index.js', included: false, watched: false },
        { pattern: 'node_modules/inherits/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/moment/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/moment-timezone/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/primeng/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/reselect/lib/index.js', included: false, watched: false },
        { pattern: 'node_modules/tslib/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/util/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/@ngui/auto-complete/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/@eui/core/dist/bundles/*.js', included: false, watched: false },

        // Paths loaded via module imports:
        // Angular itself
        { pattern: 'node_modules/@angular/**/*.js', included: false, watched: false },
        { pattern: 'node_modules/@angular/**/*.js.map', included: false, watched: false },

        'node_modules/@eui/tools/karma/karma-test-shim.js', // Add the Karma Shim

        // Add @eui/tools
        { pattern: 'node_modules/@eui/tools/**/*.js', included: false, watched: false },
        shimRootPath + '/karma-test-shim.js', // optionally extend SystemJS mapping e.g., with barrels

        // transpiled application & spec code paths loaded via module imports
        { pattern: libPath + '**/*.js', included: false, watched: true },

        // transpiled application & spec code paths loaded via module imports
        { pattern: libPath + '**/*.html', included: false, watched: true },

        // Paths for debugging with source maps in dev tools
        { pattern: libPath + '**/*.ts', included: false, watched: false },
        { pattern: libPath + '**/*.js.map', included: false, watched: false }
    ];

    const defaultConfig = {
        basePath: opt.basePath,
        frameworks: ['jasmine'],

        plugins: [
            require('karma-jasmine'),
            // require('karma-phantomjs-launcher'),
            require('karma-chrome-launcher'),
            require('karma-html-reporter'),
            // require('karma-coverage-istanbul-reporter'),
            require('karma-coverage'),
            require('karma-remap-coverage')
        ],

        client: {
            builtPaths: [libPath], // add more spec base paths as needed
            clearContext: false // leave Jasmine Spec Runner output visible in browser
        },

        files: FILES.concat(opt.files),

        // Proxied base paths for loading assets
        proxies: {
            // required for modules fetched by SystemJS
            // Each package has to set its proxies in its own "karma.conf.pkg"
            '/base/src/packages/ux-commons/src/lib/@angular/cdk/': '/base/node_modules/@angular/cdk/',
        },

        exclude: [],
        preprocessors: {},
        reporters: ['progress', 'coverage', 'html', 'remap-coverage'],

        htmlReporter: {
            outputDir: opt.packageRootPath + pkg + '/test/reports', // where to put the reports
            templatePath: null, // set if you moved jasmine_template.html
            focusOnFailures: true, // reports show failures on start
            namedFiles: true, // name files instead of creating sub-directories
            pageTitle: null, // page title for reports; browser info by default
            urlFriendlyName: false, // simply replaces spaces with _ for files/dirs
            reportName: 'test-report-summary', // report summary filename; browser info by default


            // experimental
            preserveDescribeNesting: false, // folded suites stay folded
            foldAll: false, // reports start folded (only with preserveDescribeNesting)
        },

        coverageReporter: {
            type: 'in-memory',
            includeAllSources: true,
        },

        remapCoverageReporter: {
            'text-summary': null,
            html: opt.packageRootPath + pkg + '/test/reports' + '/html',
            lcovonly: opt.packageRootPath + pkg + '/test/reports' + '/coverage-lcov/lcov.info',
            json: opt.packageRootPath + pkg + '/test/reports' + '/coverage/coverage-final.json',
        },

        customLaunchers: {
            MyHeadlessChrome: {
                base: 'ChromeHeadless',
                flags: [
                    '--no-sandbox',
                    '--remote-debugging-port=9223',
                    '--disable-translate',
                    '--disable-extensions'
                ]
            }
        },

        port: 9876,
        colors: true,
        logLevel: config.LOG_INFO,
        autoWatch: true,
        // browsers: ['PhantomJS'],
        browsers: ['MyHeadlessChrome'],
        singleRun: false,
        browserDisconnectTolerance: 2,
        browserNoActivityTimeout: 50000
    };

    defaultConfig.preprocessors[opt.packageRootPath + pkg + '/src/lib/src/**/!(*.spec).js'] = 'coverage';
    defaultConfig.proxies = Object.assign({}, defaultConfig.proxies, opt.proxies);

    return defaultConfig;
}

module.exports.get = get;
