'use strict';

require('./typescript-require/index')({
    targetES5: false,
    exitOnError: false
});

const path = require('path');
const fs = require('fs');
const chalk = require('chalk');
const UglifyJS = require("uglify-js");
const replace = require('replace-in-file');

const defaultHtmlFile = path.resolve(process.cwd(), 'src', 'index.html');
const defaultEnvConfigFolder = path.resolve(process.cwd(), 'src', 'environments');

module.exports = (env = 'dev', htmlFile = defaultHtmlFile, envConfigFolder = defaultEnvConfigFolder) => {
    console.log('\n\n---------------------------------------------------');
    console.log(chalk.cyan(`Injecting OpenID connect into HTML`));
    console.log('Environment:', env);
    console.log('HTML file:', htmlFile);
    console.log('---------------------------------------------------');

    const envFile = env === 'dev' ? 'environment.ts' : `environment.${env}.ts`;

    let envConfig;
    let count = 0;

    function loadTypescriptEnvFile() {
        try {
            envConfig = require(path.resolve(envConfigFolder, envFile));
        } catch(e) {
            count += 1;
            if (count < 3) {
                return loadTypescriptEnvFile();
            }
            console.log('-------------> Number of trials', count);
            throw(e);
            process.exit(1);
        }
    }

    loadTypescriptEnvFile();

    // const envConfig = require(path.resolve(envConfigFolder, envFile));

    const { openIdConnect } = envConfig.environment;
    if (!openIdConnect) {
        console.log(chalk.red(`Missing OpenID environment configuration. Aborting!`));
        return;
    }
    console.log('OpenID config:');
    console.log(`> enabled: ${openIdConnect.enabled}`);
    console.log(`> authorizeUrl: ${openIdConnect.authorizeUrl}`);
    console.log(`> spaClientId: ${openIdConnect.spaClientId}`);
    console.log(`> spaRedirectUrl: ${openIdConnect.spaRedirectUrl}`);

    if (!openIdConnect.enabled) {
        console.log(chalk.yellow(`[WARNING] OpenID is not enabled in this environment. Aborting!`));
        injectHTML('');
        return;
    }

    const strConfig = `var openIDconfig = {
        authorizeUrl:"${openIdConnect.authorizeUrl}",
        spaClientId:"${openIdConnect.spaClientId}",
        spaRedirectUrl:"${openIdConnect.spaRedirectUrl}"
    };\n`;

    const content = `/// ---inject-replace\n    ${strConfig}    /// ---end-inject-replace`;
    let js = fs.readFileSync(path.resolve(__dirname, 'init-openIdConnect.js'), 'utf-8');
    js = js.replace(/\/\/\/ ---inject-replace[\n\r](.*[\n\r])*\s*\/\/\/ ---end-inject-replace/, content);

    // for debug
    // console.log('\n\n-------- INJECTED JAVASCRIPT --------\n');
    // console.log(js);

    const minified = UglifyJS.minify(js);
    const toInject = `<script>${minified.code}</script>`;

    injectHTML(toInject);

    function injectHTML(str) {
        replace.sync({
            files: htmlFile,
            from: /\<\!-- open-id-inject --\>[\n\r](.*[\n\r])*\s*\<\!-- end-open-id-inject --\>/,
            to: `<!-- open-id-inject -->\n${str}\n<!-- end-open-id-inject -->`,
        });
    }
};
