'use strict';

const spawn = require('cross-spawn');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const publishHelpers = require('./publish.helpers');
const utilsPackages = require('./utils/packages');
const gitUtils = require('./utils/git-utils');
const tools = require('./tools');

const pkgInfo = utilsPackages.getPackage();
const paths = require('../config/paths')(pkgInfo);
const config = require('../config/project');

let { tag, breakOnNoIssue } = config;

console.log('\n\n------------------------------------------------------------------');
console.log(chalk.cyan('Extracting git metadata for package : ', `${pkgInfo.pkg}...`));
console.log('----------------------------------------------------------------------');

var metadata = {};

return Promise.resolve()
    .then(() => {
        return gitUtils.getCommitsFromTag(tag);
    })
    .then((commits) => {
        metadata.commits = commits;
        return gitUtils.extractIssuesFromCommits(commits);
    })
    .then((issues) => {
        metadata.issues = issues;
    })
    .then(() => {
        if (!metadata.issues || metadata.issues.length === 0) {
            console.log(chalk.red('--> WARNING : no issue found since last release'));
            if (breakOnNoIssue) {
                throw new Error('NO_ISSUE_FOUND');
            }
        }

        let buildMetadata;
        let versions;

        const buildMetadataFile = path.join(paths.pkgDirectory, '.build-metadata.json');
        if (tools.isFileExists(buildMetadataFile)) {
            buildMetadata = require(buildMetadataFile);
            versions = buildMetadata.versions;
        } else {
            buildMetadata = {};
            versions = [];
        }
        versions.push({ name: publishHelpers.getPkgVersion(paths.pkgDirectory), gitMetadata: metadata });
        buildMetadata.versions = versions;

        fs.writeFileSync(buildMetadataFile, JSON.stringify(buildMetadata, null, 4));
        console.log(chalk.green('--> OK'));
    })
    .catch((e) => {
        console.log(chalk.red('--> ERROR'));
        console.log(e);
        process.exit(1);
    })
