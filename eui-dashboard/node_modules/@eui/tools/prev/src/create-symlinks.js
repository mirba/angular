const path = require('path');
const fs = require('fs');
const childProcess = require("child_process");
const execSync = childProcess.execSync;
const tools = require('./tools');

function run(scope, inputOpt) {

    const DEFAULT_OPTS = {
        nmAppPath: 'src/app/node_modules',
        nmPath: 'node_modules',
        packageRootPath: 'src/packages',
        isFolderNamePackage: true
    };

    const opt = Object.assign(DEFAULT_OPTS, inputOpt);

    if (!scope || scope === undefined) {
        console.log('scope should be provided');
        return;
    }

    console.log('----------------------------------------------');
    console.log('Initiating repository...');
    console.log('----------------------------------------------');

    /* APP NODE_MODULE PATH */
    const nmAppPath =  path.join(path.resolve(process.cwd()), opt.nmAppPath);
    const nmSrcPath = path.join(path.resolve(process.cwd()), opt.nmPath);
    const nmAppPkgRootPath = path.join(nmSrcPath, scope);

    const packages = tools.getPackages(opt.packageRootPath);

    if (packages.length === 0) {
        return;
    }

    return Promise.resolve()
        .then(() => {
            console.log('\n-- Creating placeholder folders');
            tools.mkdir(nmAppPkgRootPath);

            console.log('\n-- Creating app node_modules symlinks');
            tools.link(nmSrcPath, nmAppPath);
            return;
        })
        .then(() => {
            return packages.reduce((promise, item) => {
                return promise.then(() => {
                    console.log('\n-- Adding symlinks for module : ' + item.package);

                    const moduleRootPath = path.join(process.cwd(), opt.packageRootPath, item.package);
                    const moduleSrcPath = path.join(moduleRootPath);

                    var moduleDestPath;
                    if (opt.isFolderNamePackage) {
                        moduleDestPath = path.join(nmSrcPath, scope, item.package);
                    } else {
                        const libNameWithScope = require(path.join(moduleRootPath, 'package.json')).name;
                        const libName = libNameWithScope.slice(libNameWithScope.indexOf('/') + 1);
                        moduleDestPath = path.join(nmSrcPath, scope, libName);
                    }

                    if (tools.isDirExists(moduleDestPath)) {
                        tools.runScript(`rimraf ${moduleDestPath}`);
                    }

                    tools.link(moduleSrcPath, moduleDestPath);
                    return;
                });
            }, Promise.resolve());
        })
        .then(() => {
            console.log('----------------------------------------------');
            console.log('Symlinks created!');
            console.log('----------------------------------------------');
        })
        .catch((e) => {
            console.log('ERROR creating symlinks');
            console.log(e);
        });

}

module.exports.run = run;
