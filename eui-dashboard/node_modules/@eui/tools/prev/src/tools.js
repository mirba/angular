const fs = require('fs');
const fse = require('fs-extra');
const path = require('path');
const glob = require('glob');
const camelCase = require('camelcase');
const execa = require('execa');
const childProcess = require("child_process");
const execSync = childProcess.execSync;

function runScript(cmd, cwdFolder) {
    const SEPARATOR = isWindows() ? ';' : ':';
    const env = Object.assign({}, process.env);

    env.Path = path.resolve('./node_modules/.bin') + SEPARATOR + env.Path;

    var cwd = process.cwd();
    if (cwdFolder) {
        cwd = path.join(cwd, cwdFolder);
    }
    var output = execSync(cmd, {
        cwd: cwd,
        env: env,
        stdio: 'inherit'
    });
}


function relativeCopy(fileGlob, from, to) {
    return new Promise((resolve, reject) => {
        glob(fileGlob, { cwd: from, nodir: true, follow: true }, (err, files) => {
            if (err) reject(err);
            files.forEach(file => {
                const origin = path.join(from, file);
                const dest = path.join(to, file);
                _recursiveMkDir(path.dirname(dest));
                fse.copy(origin, dest);
                resolve();
            })
        })
    });
}


function rmdir(path) {
    console.log('----> path exists ' + path);
    try {
        if (isWindows()) {
            fs.rmdirSync(path);
        } else {
            fs.unlinkSync(path);
        }
    } catch(e) {
    }
}

function mkdir(path) {
    if (!fs.existsSync(path)) {
        fs.mkdirSync(path);
    }
}

function link(src, target) {
    rmdir(target);
    if (isWindows()) {
        execSync(`mklink /D ${target} ${src}`);
    } else {
        execSync(`ln -s ${src} ${target}`);
    }

}

function isWindows() {
    if (path.sep === "\\") {
        return true;
    } else {
        return false;
    }
}

function getPackages(rootFolder) {
    if (!rootFolder) {
        rootFolder = 'src/packages';
    }
    console.log('-- Getting packages from ' + rootFolder);

    const packages = fs.readdirSync(rootFolder)
                       .filter(name => fs.lstatSync(path.resolve(rootFolder, name)).isDirectory())
                       .map(name => {
                           return { 'package': name }
                       });

    if (packages.length === 0) {
        console.log('----> no packages found');
    } else {
        console.log('----> packages found : ' + packages.map(p => p.package));
    }
    return packages;
}

function isDirExists(path) {
    try {
        return fs.statSync(path).isDirectory();
    } catch (err) {
        return false;
    }
}


// Recursively create a dir.
function _recursiveMkDir(dir) {
    if (!fs.existsSync(dir)) {
        _recursiveMkDir(path.dirname(dir));
        fs.mkdirSync(dir);
    }
}

function writeJsonFile(filename, file) {
    return new Promise((resolve, reject) => {
            fs.writeFile(filename, JSON.stringify(file), function (err) {
                if (err) reject(err);
                resolve();
            });
    });
}

function replacePackagesVersion(packages, version, tag) {
    return new Promise((resolve, reject) => {
        packages.forEach(item => {
            const file = process.cwd() + '/src/packages/' + item.package + '/package.json';

            console.log('-- updating ' + file + '...');

            const jsonFile = require(file);

            jsonFile.version = version;
            jsonFile.tag = tag;

            writeJsonFile('./src/packages/' + item.package + '/package.json', jsonFile);

            resolve();
        })
    });
}

module.exports.relativeCopy = relativeCopy;
module.exports.link = link;
module.exports.mkdir = mkdir;
module.exports.rmdir = rmdir;
module.exports.getPackages = getPackages;
module.exports.runScript = runScript;
module.exports.replacePackagesVersion = replacePackagesVersion;
module.exports.isDirExists = isDirExists;

