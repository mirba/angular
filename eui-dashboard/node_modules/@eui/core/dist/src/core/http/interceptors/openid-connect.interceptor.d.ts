import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/zip';
import { OpenidConnectService } from '../../authentication/openid-connect.service';
export declare class OpenidConnectInterceptor implements HttpInterceptor {
    private config;
    private openidConnectService;
    cachedApiGatewayAccessTokenResponseTimestamp: Date;
    cachedApiGatewayAccessToken: any;
    maximumRequestRetries: number;
    constructor(config: any, openidConnectService: OpenidConnectService);
    intercept(request: HttpRequest<any>, next: HttpHandler, retryCount?: number): Observable<HttpEvent<any>>;
    protected getMatchingServiceFromConfiguration(request: HttpRequest<any>, configuredServices: any): any;
    protected makeApiGatewayServiceCall(request: HttpRequest<any>, next: HttpHandler, audienceId: string, retryCount?: number): Observable<HttpEvent<any>>;
    protected makeServiceCall(request: HttpRequest<any>, next: HttpHandler, audienceId: string, retryCount?: number): Observable<HttpEvent<any>>;
    protected getServiceAccessTokenRequest(audienceId: string): HttpRequest<any>;
    protected callApiGatewayService(originalRequest: HttpRequest<any>, next: HttpHandler, apiGatewayAccessToken: any, serviceAccessToken: any, retryCount?: number): Observable<HttpEvent<any>>;
    protected urlMatches(requestUrl: string, serviceUrl: string): boolean;
    protected cachedApiGatewayAccessTokenHasExpired(): boolean;
    protected handleErrorResponse(response: HttpErrorResponse, originalRequest: HttpRequest<any>, next: HttpHandler, retryCount?: number): Observable<HttpEvent<any>>;
    protected retryRequest(originalRequest: HttpRequest<any>, next: HttpHandler, retryCount?: number): Observable<HttpEvent<any>>;
}
