import { ElementRef, Injector, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { Router } from '@angular/router';
import { FormControl, AbstractControl } from '@angular/forms';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { UxAppShellService } from './ux-app-shell.service';
export declare class UxModal {
    id: string;
    isOpen: boolean;
    isFullHeight: boolean;
    constructor(values?: Object);
}
export declare class UxService {
    private router;
    private componentFactoryResolver;
    private appRef;
    private injector;
    private asService;
    private platformId;
    isNavigationBlockDocumentActive: boolean;
    isLoggingActive: boolean;
    activeLanguage: {
        code: string;
        label: string;
    };
    shadowDomRoot: ElementRef;
    growlMessages: any[];
    isGrowlSticky: boolean;
    growlLife: number;
    growlPosition: string;
    isBlockDocumentActive: boolean;
    activeBreakpoint: BehaviorSubject<string>;
    windowWidth: number;
    windowWidth$: BehaviorSubject<number>;
    windowHeight: BehaviorSubject<number>;
    sidebarLinks: any[];
    activeModals: UxModal[];
    navigationStartCustomHandler: () => void;
    navigationEndCustomHandler: () => void;
    openModalId: BehaviorSubject<string>;
    constructor(router: Router, componentFactoryResolver: ComponentFactoryResolver, appRef: ApplicationRef, injector: Injector, asService: UxAppShellService, platformId: Object);
    readonly appRouter: Router;
    shadowDomQuery(querySelector: string): HTMLElement;
    uniqueId(): string;
    setSidebarLinks(links: any): void;
    /**
     * displays a growl UxMessage item, isStycky
     */
    growl(msg: any, isSticky?: boolean, isMultiple?: boolean, life?: number, position?: string): void;
    clearGrowl(): void;
    growlSuccess(msg: string, position?: string): void;
    growlError(msg: string, position?: string): void;
    growlWarning(msg: string, position?: string): void;
    growlInfo(msg: string, position?: string): void;
    blockDocument(): void;
    unblockDocument(): void;
    setActiveBreakpoint(width: number): string;
    isMobile(): boolean;
    isTablet(): boolean;
    isLtDesktop(): boolean;
    isDesktop(): boolean;
    isLargeDesktop(): boolean;
    isExtraLargeDesktop(): boolean;
    setWindowHeight(height: number): void;
    setWindowWidth(width: number): void;
    translate(key: string, languageCode?: string): string;
    diffDays(dateStart: Date, dateEnd: Date): number;
    diffDaysFromToday(date: Date): number;
    toggleInnerSidebar(): void;
    isSidebarStateOpen: boolean;
    handleError(error: any): any;
    openModal(modalId?: string): void;
    openMessageBox(messageBoxId?: string): void;
    closeMessageBox(messageBoxId?: string): void;
    isModalOpen(modalId?: string): boolean;
    closeModal(modalId?: string): void;
    findModalIndex(modalId: string): number;
    /**
     * Provides read-only equivalent of jQuery's position function:
     * http://api.jquery.com/position/
     */
    position(nativeEl: any): {
        width: number;
        height: number;
        top: number;
        left: number;
    };
    /**
     * Provides read-only equivalent of jQuery's offset function:
     * http://api.jquery.com/offset/
     */
    offset(nativeEl: any): {
        width: number;
        height: number;
        top: number;
        left: number;
    };
    consumeEvent(event: Event): boolean;
    validateEmail(c: FormControl): {
        validateEmail: {
            valid: boolean;
        };
    };
    markFormGroupTouched(FormControls: {
        [key: string]: AbstractControl;
    } | AbstractControl[]): void;
    getDecimalSeparator(): string;
    formatNumber(value: number | string, fractionSize?: number, inDecimalSeparator?: any, inThousandSeparator?: any): string;
    private forOwn(object, iteratee);
    private navigationStartHandler(event);
    private navigationEndHandler(event);
    private readonly window;
    private readonly document;
    private getStyle(nativeEl, cssProp);
    /**
     * Checks if a given element is statically positioned
     */
    private isStaticPositioned(nativeEl);
    /**
     * returns the closest, non-statically positioned parentOffset of a given element
     * @param nativeEl
     */
    private parentOffsetEl(nativeEl);
}
