import { ControlValueAccessor } from '@angular/forms';
import { ElementRef, QueryList, EventEmitter, AfterContentInit } from '@angular/core';
import { UxLink } from '../../../core/models/ux-link.model';
import { UxService } from '../../../core/app/ux.service';
import { UxDropdownButtonItemComponent } from './ux-dropdown-button-item.component';
export declare const UX_DROPDOWNBUTTON_VALUE_ACCESSOR: any;
export declare class UxDropdownButtonComponent implements AfterContentInit, ControlValueAccessor {
    private uxService;
    private shadowDomRoot;
    styleClass: string;
    label: string;
    iconClass: string;
    links: UxLink[];
    activeLink: UxLink;
    typeClass: string;
    isSplitButtonToggle: boolean;
    isDropDownRightAligned: boolean;
    isLinkToggle: boolean;
    isUpdateLabelFromSelectedItem: boolean;
    isOutline: boolean;
    isShowDropdownToggle: boolean;
    hasItems: boolean;
    isDisabled: boolean;
    width: string;
    dropdownMaxHeight: string;
    isSmall: boolean;
    isLarge: boolean;
    linkSelected: EventEmitter<UxLink>;
    items: QueryList<UxDropdownButtonItemComponent>;
    isShown: boolean;
    btnSizeClass: string;
    dropDownIsOpen: boolean;
    private onChange;
    private onTouched;
    constructor(uxService: UxService, shadowDomRoot: ElementRef);
    ngAfterContentInit(): void;
    readonly toggleClass: string;
    toggleOutside(evt: any): void;
    shadowDomQuery(querySelector: string): HTMLElement;
    toggleDropDownKeyDown(event: any): void;
    toggleDropDown(event: any): void;
    selectDropdownItemKeydown(event: any, link: UxLink): void;
    selectDropdownItem(event: Event, link: UxLink): void;
    closeDropDownOnEscape(keyCode: number): void;
    closeOnBlur(): void;
    navigateDropDownSelection(event: KeyboardEvent): void;
    writeValue(links: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
}
export declare class UxDropdownButtonComponentModule {
}
