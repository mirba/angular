import { EventEmitter, TemplateRef, AfterContentInit, QueryList } from '@angular/core';
import { Router } from '@angular/router';
import { UxLink } from '../../../core/models/ux-link.model';
import { UxService } from '../../../core/app/ux.service';
export declare class UxTreeNodeComponent {
    private router;
    private uxService;
    node: UxLink;
    isFirst: boolean;
    isLast: boolean;
    isRootNode: boolean;
    isClickTogglingNode: boolean;
    isMultiselect: boolean;
    isRecursiveSelection: boolean;
    expandedIconClass: string;
    collapsedIconClass: string;
    templateVariable: TemplateRef<any>;
    isShowActiveNode: boolean;
    nodeContentTemplate: TemplateRef<any>;
    nodeClick: EventEmitter<UxLink>;
    nodeToggle: EventEmitter<UxLink>;
    selectionChange: EventEmitter<UxLink>;
    nodeId: string;
    constructor(router: Router, uxService: UxService);
    hasNodeChildren(node: UxLink): boolean;
    onNodeKeydown(event: any, uxLink: UxLink): void;
    onNodeToggle(event: Event, uxLink: UxLink): void;
    onNodeClick(event: Event, uxLink: UxLink): void;
    onCheckboxChange(uxLink: UxLink, evt: any): void;
    onMetadataNodeToggle(event: Event, uxLink: UxLink): void;
    onSubNodeClick(uxLink: UxLink): void;
    onSubNodeToggle(uxLink: UxLink): void;
    onSelectionChange(uxLink: UxLink): void;
    private changeSelectionRecursively(uxLink, value);
}
export declare class UxTreeComponent implements AfterContentInit {
    nodes: UxLink[];
    isShowToolbar: boolean;
    collapseAllLabel: string;
    expandAllLabel: string;
    filterLabel: string;
    isExpanded: boolean;
    isMultiselect: boolean;
    isRecursiveSelection: boolean;
    isClickTogglingNode: boolean;
    collapsedIconClass: string;
    expandedIconClass: string;
    isShowActiveNode: boolean;
    nodeClick: EventEmitter<UxLink>;
    nodeToggle: EventEmitter<UxLink>;
    selectionChange: EventEmitter<UxLink>;
    templateVariable: TemplateRef<any>;
    templates: QueryList<any>;
    nodeContentTemplate: TemplateRef<any>;
    ngAfterContentInit(): void;
    getSelectedNodes(): UxLink[];
    onNodeToggle(uxLink: UxLink): void;
    onNodeClick(uxLink: UxLink): void;
    onExpandAll(event: Event): void;
    onCollapseAll(event: Event): void;
    onSelectionChange(uxLink: UxLink): void;
    onFilter(filterValue: string): void;
    private getSelectedNodesRecursive(nodes);
    private isFilterMatched(node, filterValue);
    private setNodesExpandedState(nodes, expanded);
    private setNodesVisibleState(nodes, visible);
    private setNodesSelectedState(nodes, selected);
}
export declare class UxTreeComponentModule {
}
