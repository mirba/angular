import { AfterContentInit, OnInit, OnDestroy, QueryList, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { UxService } from '../../../core/app/ux.service';
import { UxDomService } from '../../../core/app/ux-dom.service';
import { UxPanelsComponent } from './ux-panels.component';
export declare class UxPanelComponent implements AfterContentInit, OnInit, OnDestroy {
    private render;
    protected uxService: UxService;
    protected uxDomService: UxDomService;
    id: string;
    contentId: string;
    styleClass: string;
    contentStyleClass: string;
    headerStyleClass: string;
    label: string;
    subLabel: string;
    labelInfos: string;
    filterInput: string;
    iconClass: string;
    iconTypeClass: string;
    isIconRounded: boolean;
    isExpandable: boolean;
    isExpanded: boolean;
    isVisible: boolean;
    isSelected: boolean;
    isCollapsible: boolean;
    isCollapsed: boolean;
    tagLabel: string;
    tagTypeClass: string;
    tagCount: string;
    badgeLabel: string;
    badgeTypeClass: string;
    hasTabs: boolean;
    hasNoHeader: boolean;
    hasNoContentPadding: boolean;
    isBlocked: boolean;
    isBlockedAriaLabel: string;
    maxHeight: string;
    contentHeight: string;
    isFlat: boolean;
    isLargeHeader: boolean;
    isLargeFooter: boolean;
    isSmallHeader: boolean;
    hasStatusIndicator: boolean;
    statusIndicatorTypeClass: string;
    statusIndicatorMessageLabel: string;
    isTogglableStatusIndicatorContent: boolean;
    isStatusIndicatorContentExpanded: boolean;
    hasStatusIndicatorHeaderBg: boolean;
    hasStatusIndicatorHeaderIcon: boolean;
    isEditModeActive: boolean;
    isContainerOnly: boolean;
    isClickable: boolean;
    isHighlighted: boolean;
    isAccordionPanel: boolean;
    customState: string;
    subLabelSizeLimit: number;
    tabindex: string;
    isSticky: boolean;
    panelExpanded: EventEmitter<string>;
    panelCollapsed: EventEmitter<boolean>;
    showOnlyInvalid: boolean;
    actualMaxHeight: string;
    uxPanelsComponent: UxPanelsComponent;
    statusIndicatorIconClass: string;
    labelThemeClass: string;
    isExpandedInitialState: boolean;
    customPanelHeader: QueryList<UxPanelHeaderTagDirective>;
    customPanelFooter: QueryList<UxPanelFooterTagDirective>;
    customPanelHeaderRightContent: QueryList<UxPanelHeaderRightContentTagDirective>;
    customPanelHeaderWithDescendants: QueryList<UxPanelHeaderWithDescendantsTagDirective>;
    customPanelFooterWithDescendants: QueryList<UxPanelFooterWithDescendantsTagDirective>;
    customPanelHeaderRightContentWithDescendants: QueryList<UxPanelHeaderRightContentWithDescendantsTagDirective>;
    customStatusIndicatorContent: QueryList<UxPanelHeaderStatusIndicatorContentTagDirective>;
    customSubHeaderContent: QueryList<UxPanelSubHeaderContentTagDirective>;
    HTMLElement: HTMLElement;
    hasMaxHeight: boolean;
    hasContentHeight: boolean;
    stateExpandableClass: string;
    stateTabsClass: string;
    statePanelItemClasses: string;
    statePanelHeaderClasses: string;
    statePanelContentClasses: string;
    stickyContainerElementRef: ElementRef;
    stickyContentElementRef: ElementRef;
    private readonly stickyContentYOffset;
    private onScrollBind;
    private onResizeBind;
    private sticked;
    private selectedOffset;
    private windowOffsetTop;
    private offSet;
    private addClass;
    constructor(uxPanelsComponent: UxPanelsComponent, el: ElementRef, render: Renderer2, uxService: UxService, uxDomService: UxDomService);
    ngOnInit(): void;
    onScroll(): void;
    onResize(): void;
    onWindowScroll(): void;
    handleStickyPanel(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    readonly statePanelItemClassesDynamic: string;
    readonly statePanelContentClassesDynamic: string;
    readonly hasCustomPanelHeader: boolean;
    readonly hasCustomPanelFooter: boolean;
    readonly hasCustomPanelHeaderRightContent: boolean;
    readonly hasCustomPanelHeaderWithDescendants: boolean;
    readonly hasCustomPanelFooterWithDescendants: boolean;
    readonly hasCustomPanelHeaderRightContentWithDescendants: boolean;
    toggle(event: Event): void;
    toggleMaxHeight(event: Event): void;
    readonly isMaxHeightExpanded: boolean;
    onToggleStatusIndicatorContent(): void;
    onCollapsibleButtonClick(event: any): void;
    onKeyDown(event: any): void;
    private addSticky();
    private removeSticky();
}
export declare class UxPanelHeaderTagDirective {
}
export declare class UxPanelFooterTagDirective {
}
export declare class UxPanelHeaderRightContentTagDirective {
}
export declare class UxPanelHeaderWithDescendantsTagDirective {
}
export declare class UxPanelFooterWithDescendantsTagDirective {
}
export declare class UxPanelHeaderRightContentWithDescendantsTagDirective {
}
export declare class UxPanelHeaderStatusIndicatorContentTagDirective {
}
export declare class UxPanelSubHeaderContentTagDirective {
}
export declare class UxPanelComponentModule {
}
