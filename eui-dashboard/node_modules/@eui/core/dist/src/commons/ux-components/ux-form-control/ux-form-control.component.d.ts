import { ElementRef, OnDestroy, AfterViewInit, AfterContentInit, ChangeDetectorRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { FormControl, Validator, ControlValueAccessor } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { UxFormGroupComponent } from '../ux-form-group/ux-form-group.component';
import { Calendar } from 'primeng/components/calendar/calendar';
import { UxService } from '../../../core/app/ux.service';
export declare class UxFormControlComponent implements AfterViewInit, OnDestroy, ControlValueAccessor, Validator, AfterContentInit, OnChanges {
    private uxService;
    private translateService;
    private cd;
    protected elementRef: ElementRef;
    id: string;
    feedbackTypeClass: string;
    isReadOnly: boolean;
    isRequired: boolean;
    styleClass: string;
    validationErrorMessage: string;
    infoLabel: string;
    placeholderLabel: string;
    formControlName: string;
    isInputText: boolean;
    isTextarea: boolean;
    rows: number;
    minRows: number;
    isTextareaAutoresize: boolean;
    isDatepicker: boolean;
    isDatetimepicker: boolean;
    datepickerDateformat: string;
    datepickerYearRange: string;
    datepickerLocale: any;
    isSelect: boolean;
    selectOptions: any[];
    selectKeyName: string;
    selectValueName: string;
    isCheckbox: boolean;
    checkboxLabel: string;
    isRadio: boolean;
    radioLabel: string;
    formControlValue: any;
    isNumber: boolean;
    decimalSeparator: ',' | '.' | null;
    thousandSeparator: string;
    isNumberFormatPlaceholder: boolean;
    maxlength: number;
    maxLengthValidationErrorMessage: string;
    isDisabled: boolean;
    inputStyleClass: string;
    tabindex: string;
    groupId: string;
    modelChange: EventEmitter<any>;
    touched: EventEmitter<any>;
    calendarControl: Calendar;
    radioElement: ElementRef;
    inputValue: any;
    data: any;
    generatedId: string;
    checked: boolean;
    isMaxLengthValid: boolean;
    feedbackLabel: string;
    uxFormGroupComponent: UxFormGroupComponent;
    isSelectHasOptions: boolean;
    ariaInvalid: boolean;
    hasFormGroupParent: boolean;
    intendedFormGroupIsValid: boolean;
    validationErrorType: string;
    protected lastAutoCorrectedValue: any;
    private _formControl;
    private languageChangeSubscription;
    constructor(uxFormGroupComponent: UxFormGroupComponent, uxService: UxService, translateService: TranslateService, cd: ChangeDetectorRef, elementRef: ElementRef);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    setUxValidationErrorsToFormControl(): void;
    setUxValidationErrorsToParentFormGroup(): void;
    readonly isFieldValid: boolean;
    OnMaxLengthValidityChange(state: boolean): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    validate(c: FormControl): {
        fieldError: {
            errorMessage: string;
        };
    };
    onChange(event: any): void;
    onTouched(event: any): void;
    readonly selectValue: string;
    protected updateAriaInvalid(): void;
    private updateFormGroupValidationStatus();
    private propagateChange;
    private propagateTouched;
}
export declare class UxFormControlComponentModule {
}
