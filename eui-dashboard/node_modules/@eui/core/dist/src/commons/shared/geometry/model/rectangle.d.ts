import { Position } from './../interface/position';
import { Bounds } from './../interface/bounds';
import { Point } from './point';
import { Overflow } from './overflow';
export declare class Rectangle implements Position, Bounds {
    left: number;
    top: number;
    right: number;
    bottom: number;
    private constructor();
    static create(x: number, y: number, width: number, height: number): Rectangle;
    static fromBounds(left: number, top: number, right: number, bottom: number): Rectangle;
    static fromRect(rect: Rectangle): Rectangle;
    static empty(): Rectangle;
    x: number;
    y: number;
    width: number;
    height: number;
    clone(): Rectangle;
    setRectangle(x: number, y: number, width: number, height: number): Rectangle;
    setBounds(left: number, top: number, right: number, bottom: number): Rectangle;
    copyFrom(other: Rectangle): Rectangle;
    moveTo(p: Point, anchor?: Point): Rectangle;
    moveXTo(x: number, anchor?: Point): Rectangle;
    moveYTo(y: number, anchor?: Point): Rectangle;
    translate(offsetX: number, offsetY: number): Rectangle;
    translateX(offsetX: number): Rectangle;
    translateY(offsetY: number): Rectangle;
    scale(factor: number): Rectangle;
    flipX(yAxis: number): Rectangle;
    flipY(xAxis: number): Rectangle;
    flip(point: Point): Rectangle;
    map(fn: (number) => number): this;
    isBelow(p: Point): boolean;
    isAbove(p: Point): boolean;
    isOnTheLeft(p: Point): boolean;
    isOnTheRight(p: Point): boolean;
    position(): Point;
    leftTop(): Point;
    centerTop(): Point;
    rightTop(): Point;
    leftCenter(): Point;
    center(): Point;
    rightCenter(): Point;
    leftBottom(): Point;
    centerBottom(): Point;
    rightBottom(): Point;
    isEmpty(): boolean;
    containsRect(other: Rectangle): boolean;
    containsPoint(point: Point): boolean;
    overflows(other: Rectangle): boolean;
    overflowsLeft(other: Rectangle): boolean;
    overflowsTop(other: Rectangle): boolean;
    overflowsRight(other: Rectangle): boolean;
    overflowsBottom(other: Rectangle): boolean;
    overflow(other: Rectangle): Overflow;
    intersects(other: Rectangle): boolean;
    intersect(other: Rectangle): Rectangle;
    union(other: Rectangle): Rectangle;
    restrictTo(other: Rectangle): Rectangle;
    expandToContain(other: Rectangle): Rectangle;
    translateInside(other: Rectangle): Rectangle;
    translateXInside(other: Rectangle): Rectangle;
    translateYInside(other: Rectangle): Rectangle;
    blend(rect: Rectangle, scalar: number): Rectangle;
    inflate(xScale: number, yScale?: number): Rectangle;
    expandToIntegers(): Rectangle;
    relativeTo(parent: Rectangle): Rectangle;
    equals(other: Rectangle): boolean;
    toString(): string;
}
