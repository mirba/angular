import { extend, twig } from 'twig';
import * as ecLabelTpl from '!raw-loader!@ecl/ec-component-label/ec-component-label.twig';
import * as ecButtonTpl from '!raw-loader!@ecl/ec-component-button/ec-component-button.twig';
import * as ecFeaturedItemTpl from '!raw-loader!@ecl/ec-component-featured-item/ec-component-featured-item.twig';
import * as ecMetaTpl from '!raw-loader!@ecl/ec-component-meta/ec-component-meta.twig';
import * as ecLinkTpl from '!raw-loader!@ecl/ec-component-link/ec-component-link.twig';
import * as ecMessageTpl from '!raw-loader!@ecl/ec-component-message/ec-component-message.twig';
import * as ecNavigationMenuTpl from '!raw-loader!@ecl/ec-component-navigation-menu/ec-component-navigation-menu.twig';
import * as ecFooterTpl from '!raw-loader!@ecl/ec-component-footer/ec-component-footer.twig';
import * as ecTimelineTpl from '!raw-loader!@ecl/ec-component-timeline/ec-component-timeline.twig';
import * as ecListingTpl from '!raw-loader!@ecl/ec-component-listing/ec-component-listing.twig';
import * as ecListItemTpl from '!raw-loader!@ecl/ec-component-list-item/ec-component-list-item.twig';
import * as ecDateBlockTpl from '!raw-loader!@ecl/ec-component-date-block/ec-component-date-block.twig';
import * as ecSearchFormTpl from '!raw-loader!@ecl/ec-component-search-form/ec-component-search-form.twig';
import * as ecFormTextInputTpl from '!raw-loader!@ecl/ec-component-form-text-input/ec-component-form-text-input.twig';
import * as ecPageHeaderTpl from '!raw-loader!@ecl/ec-component-page-header/ec-component-page-header.twig';
import * as ecBreadcrumbTpl from '!raw-loader!@ecl/ec-component-breadcrumb/ec-component-breadcrumb.twig';
import * as ecStyleIconTpl from '!raw-loader!@ecl/ec-style-icon/ec-style-icon.twig';
import * as ecStyleImageTpl from '!raw-loader!@ecl/ec-style-image/ec-style-image.twig';
import * as genericMetaGenericTpl from '!raw-loader!@ecl/generic-component-meta/generic-component-meta.twig';
import * as genericLabelTpl from '!raw-loader!@ecl/generic-component-label/generic-component-label.twig';
import * as genericButtonTpl from '!raw-loader!@ecl/generic-component-button/generic-component-button.twig';
import * as genericMessageTpl from '!raw-loader!@ecl/generic-component-message/generic-component-message.twig';
import * as genericFooterTpl from '!raw-loader!@ecl/generic-component-footer/generic-component-footer.twig';
import * as genericTimelineTpl from '!raw-loader!@ecl/generic-component-timeline/generic-component-timeline.twig';
import * as genericListingTpl from '!raw-loader!@ecl/generic-component-listing/generic-component-listing.twig';
import * as genericListItemTpl from '!raw-loader!@ecl/generic-component-list-item/generic-component-list-item.twig';
import * as genericDateBlockTpl from '!raw-loader!@ecl/generic-component-date-block/generic-component-date-block.twig';
import * as genericSearchFormTpl from '!raw-loader!@ecl/generic-component-search-form/generic-component-search-form.twig';
import * as genericFormTextInputTpl from '!raw-loader!@ecl/generic-component-form-text-input/generic-component-form-text-input.twig';
import * as genericPageHeaderTpl from '!raw-loader!@ecl/generic-component-page-header/generic-component-page-header.twig';
import * as genericBreadcrumbTpl from '!raw-loader!@ecl/generic-component-breadcrumb/generic-component-breadcrumb.twig';
import * as genericStyleImageTpl from '!raw-loader!@ecl/generic-style-image/generic-style-image.twig';
import { NgModule, Component, Input, ViewContainerRef, ViewChild, EventEmitter, Output, Directive, ContentChildren, forwardRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { UxService } from '@eui/ux-core';
import { UxGrowlComponentModule, UxBlockDocumentComponentModule, UxLayoutPageHeaderComponentModule, UxLanguageSelectorComponentModule } from '@eui/ux-commons';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclBaseComponent {
    constructor() {
        extend(function (T) {
            T.Templates.registerLoader('ecl', (location, params) => {
                if (location === '@ecl/ec-component-meta') {
                    params.data = ecMetaTpl;
                }
                else if (location === '@ecl/ec-component-link') {
                    params.data = ecLinkTpl;
                }
                else if (location === '@ecl/ec-component-button') {
                    params.data = ecButtonTpl;
                }
                else if (location === '@ecl/ec-component-featured-item') {
                    params.data = ecFeaturedItemTpl;
                }
                else if (location === '@ecl/ec-component-label') {
                    params.data = ecLabelTpl;
                }
                else if (location === '@ecl/ec-component-message') {
                    params.data = ecMessageTpl;
                }
                else if (location === '@ecl/ec-component-navigation-menu') {
                    params.data = ecNavigationMenuTpl;
                }
                else if (location === '@ecl/ec-component-footer') {
                    params.data = ecFooterTpl;
                }
                else if (location === '@ecl/ec-component-timeline') {
                    params.data = ecTimelineTpl;
                }
                else if (location === '@ecl/ec-component-listing') {
                    params.data = ecListingTpl;
                }
                else if (location === '@ecl/ec-component-list-item') {
                    params.data = ecListItemTpl;
                }
                else if (location === '@ecl/ec-component-date-block') {
                    params.data = ecDateBlockTpl;
                }
                else if (location === '@ecl/ec-component-search-form') {
                    params.data = ecSearchFormTpl;
                }
                else if (location === '@ecl/ec-component-form-text-input') {
                    params.data = ecFormTextInputTpl;
                }
                else if (location === '@ecl/ec-component-page-header') {
                    params.data = ecPageHeaderTpl;
                }
                else if (location === '@ecl/ec-component-breadcrumb') {
                    params.data = ecBreadcrumbTpl;
                }
                else if (location === '@ecl/ec-style-icon') {
                    params.data = ecStyleIconTpl;
                }
                else if (location === '@ecl/ec-style-image') {
                    params.data = ecStyleImageTpl;
                }
                else if (location === '@ecl/generic-component-meta') {
                    params.data = genericMetaGenericTpl;
                }
                else if (location === '@ecl/generic-component-button') {
                    params.data = genericButtonTpl;
                }
                else if (location === '@ecl/generic-component-label') {
                    params.data = genericLabelTpl;
                }
                else if (location === '@ecl/generic-component-message') {
                    params.data = genericMessageTpl;
                }
                else if (location === '@ecl/generic-component-footer') {
                    params.data = genericFooterTpl;
                }
                else if (location === '@ecl/generic-component-timeline') {
                    params.data = genericTimelineTpl;
                }
                else if (location === '@ecl/generic-component-listing') {
                    params.data = genericListingTpl;
                }
                else if (location === '@ecl/generic-component-list-item') {
                    params.data = genericListItemTpl;
                }
                else if (location === '@ecl/generic-component-date-block') {
                    params.data = genericDateBlockTpl;
                }
                else if (location === '@ecl/generic-component-search-form') {
                    params.data = genericSearchFormTpl;
                }
                else if (location === '@ecl/generic-component-form-text-input') {
                    params.data = genericFormTextInputTpl;
                }
                else if (location === '@ecl/generic-component-page-header') {
                    params.data = genericPageHeaderTpl;
                }
                else if (location === '@ecl/generic-component-breadcrumb') {
                    params.data = genericBreadcrumbTpl;
                }
                else if (location === '@ecl/generic-style-image') {
                    params.data = genericStyleImageTpl;
                }
                return new T.Template(params);
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        extend(function (T) {
            T.Templates.unRegisterLoader('ecl');
        });
    }
    /**
     * @param {?} templateName
     * @param {?=} data
     * @param {?=} blocks
     * @return {?}
     */
    renderTemplate(templateName, data, blocks = {}) {
        const /** @type {?} */ template = twig({
            method: 'ecl',
            name: templateName
        });
        return template.render(data, {
            blocks: blocks
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} message
 * @return {?}
 */
function dismissMessage(message) {
    if (message && message.parentNode !== null) {
        message.parentNode.removeChild(message);
    }
}
/**
 * @return {?}
 */
function initMessages() {
    const /** @type {?} */ selectorClass = 'ecl-message__dismiss';
    const /** @type {?} */ messages = Array.prototype.slice.call(document.getElementsByClassName(selectorClass));
    messages.forEach(message => message.addEventListener('click', () => dismissMessage(message.parentElement)));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclMessagesComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
        this.dismiss = false;
        this.messages = [];
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        const /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-message', {
            title: this.title,
            dismiss: this.dismiss,
            messages: this.messages,
            modifier: this.type
        });
        this.vcRef.element.nativeElement.innerHTML = html;
        initMessages();
    }
}
EclMessagesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-messages',
                template: ''
            },] },
];
/** @nocollapse */
EclMessagesComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclMessagesComponent.propDecorators = {
    "title": [{ type: Input },],
    "dismiss": [{ type: Input },],
    "type": [{ type: Input },],
    "messages": [{ type: Input },],
};
class EclMessagesComponentModule {
}
EclMessagesComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclMessagesComponent],
                declarations: [EclMessagesComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/* eslint-disable no-param-reassign */
const /** @type {?} */ toggleExpandable = (toggleElement, { context = document, forceClose = false, closeSiblings = false, siblingsSelector = '[aria-controls][aria-expanded]', } = {}) => {
    if (!toggleElement) {
        return;
    }
    // Get target element
    const /** @type {?} */ target = document.getElementById(toggleElement.getAttribute('aria-controls'));
    // Exit if no target found
    if (!target) {
        return;
    }
    // Get current status
    const /** @type {?} */ isExpanded = forceClose === true ||
        toggleElement.getAttribute('aria-expanded') === 'true';
    // Toggle the expandable/collapsible
    toggleElement.setAttribute('aria-expanded', !isExpanded);
    target.setAttribute('aria-hidden', isExpanded + '');
    // Toggle label if possible
    if (!isExpanded && toggleElement.hasAttribute('data-label-expanded')) {
        toggleElement.innerHTML = toggleElement.getAttribute('data-label-expanded');
    }
    else if (isExpanded && toggleElement.hasAttribute('data-label-collapsed')) {
        toggleElement.innerHTML = toggleElement.getAttribute('data-label-collapsed');
    }
    // Close siblings if requested
    if (closeSiblings === true) {
        const /** @type {?} */ siblingsArray = Array.prototype.slice
            .call(context.querySelectorAll(siblingsSelector))
            .filter(sibling => sibling !== toggleElement);
        siblingsArray.forEach(sibling => {
            toggleExpandable(sibling, {
                context,
                forceClose: true,
            });
        });
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ queryAll = (selector, context = document) => [].slice.call(context.querySelectorAll(selector));
const /** @type {?} */ onClick = (node, menu) => e => {
    if (node && node.hasAttribute('aria-haspopup')) {
        const /** @type {?} */ hasPopup = node.getAttribute('aria-haspopup');
        if (hasPopup === '' || hasPopup === 'true') {
            e.preventDefault();
            toggleExpandable(node, {
                context: menu,
                closeSiblings: true,
            });
        }
    }
};
const /** @type {?} */ onKeydown = (node, menu) => e => {
    const /** @type {?} */ currentTab = node.parentElement;
    const /** @type {?} */ previousTabItem = currentTab.previousElementSibling ||
        currentTab.parentElement.lastElementChild;
    const /** @type {?} */ nextTabItem = currentTab.nextElementSibling || currentTab.parentElement.firstElementChild;
    // don't catch key events when ⌘ or Alt modifier is present
    if (e.metaKey || e.altKey) {
        return;
    }
    // catch left/right and up/down arrow key events
    // if new next/prev tab available, show it by passing tab anchor to showTab method
    switch (e.keyCode) {
        // ENTER or SPACE
        case 13:
        case 32:
            onClick(e.currentTarget, menu)(e);
            break;
        // ARROWS LEFT and UP
        case 37:
        case 38:
            e.preventDefault();
            previousTabItem.querySelector('a').focus();
            break;
        // ARROWS RIGHT and DOWN
        case 39:
        case 40:
            e.preventDefault();
            nextTabItem.querySelector('a').focus();
            break;
        default:
            break;
    }
};
const /** @type {?} */ megamenu = ({ selector: selector = '.ecl-navigation-menu', toggleSelector: toggleSelector = '.ecl-navigation-menu__toggle', listSelector: listSelector = '.ecl-navigation-menu__root', linkSelector: linkSelector = '.ecl-navigation-menu__link', } = {}) => {
    const /** @type {?} */ megamenusArray = queryAll(selector);
    megamenusArray.forEach(menu => {
        // Make the toggle expandable
        const /** @type {?} */ toggle = menu.querySelector(toggleSelector);
        if (toggle) {
            toggle.addEventListener('click', () => toggleExpandable(toggle, { context: menu }));
        }
        // Get the list of links
        const /** @type {?} */ list = menu.querySelector(listSelector);
        // Get expandables within the list
        const /** @type {?} */ nodesArray = queryAll(linkSelector, list);
        nodesArray.forEach(node => {
            node.addEventListener('click', onClick(node, list));
            node.addEventListener('keydown', onKeydown(node, list));
        });
    });
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclNavigationMenuComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
        this.links = [];
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        let /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-navigation-menu', {
            label: this.label,
            links: this.links
        });
        this.vcRef.element.nativeElement.innerHTML = html;
        megamenu();
    }
}
EclNavigationMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-navigation-menu',
                template: ''
            },] },
];
/** @nocollapse */
EclNavigationMenuComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclNavigationMenuComponent.propDecorators = {
    "label": [{ type: Input },],
    "links": [{ type: Input },],
};
class EclNavigationMenuComponentModule {
}
EclNavigationMenuComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclNavigationMenuComponent],
                declarations: [EclNavigationMenuComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclFootersComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        let /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-footer', this.menus);
        this.vcRef.element.nativeElement.innerHTML = html;
    }
}
EclFootersComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-footers',
                template: ''
            },] },
];
/** @nocollapse */
EclFootersComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclFootersComponent.propDecorators = {
    "menus": [{ type: Input },],
};
class EclFootersComponentModule {
}
EclFootersComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclFootersComponent],
                declarations: [EclFootersComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclButtonComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        let /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-button', {
            label: this.label,
            modifier: this.modifier,
            icon: this.icon,
            is_block: this.isBlock,
            extra_classes: this.styleClass,
            extra_attributes: this.extraAttributes
        });
        this.vcRef.element.nativeElement.innerHTML = html;
    }
}
EclButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-button',
                template: ''
            },] },
];
/** @nocollapse */
EclButtonComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclButtonComponent.propDecorators = {
    "label": [{ type: Input },],
    "modifier": [{ type: Input },],
    "icon": [{ type: Input },],
    "isBlock": [{ type: Input },],
    "styleClass": [{ type: Input },],
    "extraAttributes": [{ type: Input },],
};
class EclButtonComponentModule {
}
EclButtonComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclButtonComponent],
                declarations: [EclButtonComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclLabelComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        let /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-label', {
            status: this.status,
            body: this.body
        });
        this.vcRef.element.nativeElement.innerHTML = html;
    }
}
EclLabelComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-label',
                template: ''
            },] },
];
/** @nocollapse */
EclLabelComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclLabelComponent.propDecorators = {
    "status": [{ type: Input },],
    "body": [{ type: Input },],
};
class EclLabelComponentModule {
}
EclLabelComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclLabelComponent],
                declarations: [EclLabelComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclFeaturedItemComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
        this.contentSelector = '.ecl-link';
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        const /** @type {?} */ hostEl = this.vcRef.element.nativeElement;
        const /** @type {?} */ body = this.content.nativeElement.innerHTML;
        const /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-featured-item', {
            variant: this.variant,
            image: {
                src: this.imageSrc,
                alt: this.imageAlt
            },
            metas: this.metas,
            title: this.title,
            link: {
                href: this.linkHref,
                label: this.linkLabel
            }
        }, { body: '' });
        hostEl.innerHTML = html;
        hostEl.querySelector(this.contentSelector)
            .insertAdjacentElement('afterend', this.content.nativeElement);
    }
}
EclFeaturedItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-featured-item',
                template: `<span #content><ng-content></ng-content></span>`
            },] },
];
/** @nocollapse */
EclFeaturedItemComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclFeaturedItemComponent.propDecorators = {
    "variant": [{ type: Input },],
    "title": [{ type: Input },],
    "imageSrc": [{ type: Input },],
    "imageAlt": [{ type: Input },],
    "metas": [{ type: Input },],
    "linkHref": [{ type: Input },],
    "linkLabel": [{ type: Input },],
    "content": [{ type: ViewChild, args: ['content',] },],
};
class EclFeaturedItemComponentModule {
}
EclFeaturedItemComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclFeaturedItemComponent],
                declarations: [EclFeaturedItemComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Timeline
 */
const /** @type {?} */ expandTimeline = (timeline, button, { classToRemove = 'ecl-timeline__item--over-limit', hiddenElementsSelector = '.ecl-timeline__item--over-limit', } = {}) => {
    if (!timeline) {
        return;
    }
    const /** @type {?} */ hiddenElements = Array.prototype.slice.call(timeline.querySelectorAll(hiddenElementsSelector));
    // Remove extra class
    hiddenElements.forEach(element => {
        element.classList.remove(classToRemove);
    });
    // Remove buttton
    button.parentNode.removeChild(button);
};
// Helper method to automatically attach the event listener to all the expandables on page load
const /** @type {?} */ timelines = ({ selector = '.ecl-timeline', buttonSelector = '.ecl-timeline__button', hiddenElementsSelector = '.ecl-timeline__item--over-limit', classToRemove = 'ecl-timeline__item--over-limit', context = document, } = {}) => {
    const /** @type {?} */ nodesArray = Array.prototype.slice.call(context.querySelectorAll(selector));
    nodesArray.forEach(node => {
        const /** @type {?} */ button = context.querySelector(buttonSelector);
        if (button) {
            button.addEventListener('click', () => expandTimeline(node, button, { classToRemove, hiddenElementsSelector }));
        }
    });
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclTimelineComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        const /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-timeline', {
            limit: this.limit,
            button_label: this.buttonLabel,
            items: this.items
        });
        this.vcRef.element.nativeElement.innerHTML = html;
        timelines();
    }
}
EclTimelineComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-timeline',
                template: ``
            },] },
];
/** @nocollapse */
EclTimelineComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclTimelineComponent.propDecorators = {
    "limit": [{ type: Input },],
    "buttonLabel": [{ type: Input },],
    "items": [{ type: Input },],
};
class EclTimelineComponentModule {
}
EclTimelineComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclTimelineComponent],
                declarations: [EclTimelineComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclListingComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        let /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-listing', {
            variant: this.variant,
            items: this.items
        });
        this.vcRef.element.nativeElement.innerHTML = html;
    }
}
EclListingComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-listing',
                template: ''
            },] },
];
/** @nocollapse */
EclListingComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclListingComponent.propDecorators = {
    "variant": [{ type: Input },],
    "items": [{ type: Input },],
};
class EclListingComponentModule {
}
EclListingComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclListingComponent],
                declarations: [EclListingComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclListingNavigationComponent {
}
EclListingNavigationComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-listing-navigation',
                template: "<div class=\"ecl-listing-navigation\"> <h3 class=\"ecl-listing-navigation__title\"> <a [attr.href]=\"url || externalUrl\" [attr.target]=\"externalUrl ? '_blank' : null\" class=\"ecl-listing-navigation__link\">{{ title }}</a> </h3> <div *ngIf=\"description\" class=\"ecl-listing-navigation__description\">{{ description }}</div> <ul *ngIf=\"links\" class=\"ecl-listing-navigation__items\"> <li *ngFor=\"let link of links\" class=\"ecl-listing-navigation__item\"> <a *ngIf=\"!link.isSeparator\" [attr.href]=\"link.url || link.externalUrl\" [attr.target]=\"link.externalUrl ? '_blank' : null\" class=\"ecl-listing-navigation__link\">{{ link.label }}</a> <hr *ngIf=\"link.isSeparator\" class=\"ecl-listing-navigation__separator\"/> </li> </ul> </div>",
                styles: [".ecl-listing-navigation{border-top:3px solid #ffd617;margin-bottom:1rem}.ecl-listing-navigation__title{font-weight:bold;font-size:1.125rem;margin-top:1rem;margin-bottom:1.5rem}.ecl-listing-navigation__description{margin-bottom:0.75rem}.ecl-listing-navigation__item{padding-bottom:0.5rem}.ecl-listing-navigation__separator{margin:0.5rem 0;border-top:1px solid #9f9f9f} /*# sourceMappingURL=ecl-listing-navigation.component.css.map */"]
            },] },
];
/** @nocollapse */
EclListingNavigationComponent.propDecorators = {
    "title": [{ type: Input },],
    "url": [{ type: Input },],
    "externalUrl": [{ type: Input },],
    "description": [{ type: Input },],
    "links": [{ type: Input },],
};
class EclListingNavigationComponentModule {
}
EclListingNavigationComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclListingNavigationComponent],
                declarations: [EclListingNavigationComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclSearchFormComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        let /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-search-form', {
            ariaLabel: this.ariaLabel,
            button: this.button,
            input: this.input
        });
        this.vcRef.element.nativeElement.innerHTML = html;
    }
}
EclSearchFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-search-form',
                template: ''
            },] },
];
/** @nocollapse */
EclSearchFormComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclSearchFormComponent.propDecorators = {
    "ariaLabel": [{ type: Input },],
    "button": [{ type: Input },],
    "input": [{ type: Input },],
};
class EclSearchFormComponentModule {
}
EclSearchFormComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclSearchFormComponent],
                declarations: [EclSearchFormComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclPageHeaderComponent extends EclBaseComponent {
    /**
     * @param {?} vcRef
     */
    constructor(vcRef) {
        super();
        this.vcRef = vcRef;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        let /** @type {?} */ html = super.renderTemplate('@ecl/ec-component-page-header', {
            identity: this.identity,
            breadcrumb: this.breadcrumb
        });
        this.vcRef.element.nativeElement.innerHTML = html;
    }
}
EclPageHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-page-header',
                template: ''
            },] },
];
/** @nocollapse */
EclPageHeaderComponent.ctorParameters = () => [
    { type: ViewContainerRef, },
];
EclPageHeaderComponent.propDecorators = {
    "identity": [{ type: Input },],
    "breadcrumb": [{ type: Input },],
};
class EclPageHeaderComponentModule {
}
EclPageHeaderComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [EclPageHeaderComponent],
                declarations: [EclPageHeaderComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclLayoutAppShellComponent {
    /**
     * @param {?} uxService
     * @param {?} translateService
     */
    constructor(uxService, translateService) {
        this.uxService = uxService;
        this.translateService = translateService;
        // GLOBAL
        this.appHomeUrl = '/screen/home';
        this.footerLinks = [];
        this.menuLinks = [];
        this.languageCodes = '';
        this.hasBreadcrumb = false;
        this.isSearchInputVisible = false;
        this.languageChanged = new EventEmitter();
        this.searchClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get activeLanguageCode() {
        return this.selectedLanguage && this.selectedLanguage.code || this.translateService.currentLang;
    }
    /**
     * @param {?} language
     * @return {?}
     */
    onLanguageChanged(language) {
        this.languageChanged.emit(language);
    }
}
EclLayoutAppShellComponent.decorators = [
    { type: Component, args: [{
                selector: 'ecl-layout-app-shell',
                template: "<div id=\"app-wrapper\" class=\"ux-t-ecl ecl-typography language-{{activeLanguageCode}}\"> <header class=\"ecl-site-header\" role=\"banner\"> <div class=\"ecl-container\"> <nav class=\"ecl-navigation-list-wrapper ecl-u-f-r\"> <h2 class=\"ecl-u-sr-only\">User menu</h2> <ng-content select=\"eclAppShellTopNavContent\"></ng-content> </nav> </div> <div class=\"ecl-site-switcher ecl-site-switcher--header\"> <div class=\"ecl-container\"> </div> </div> <div class=\"ecl-container ecl-site-header__banner\"> <a href=\"https://ec.europa.eu\" class=\"ecl-logo ecl-logo--logotype ecl-site-header__logo\" title=\"Home - European Commission\"> <span class=\"ecl-u-sr-only\">Home - European Commission</span> </a> <ux-language-selector *ngIf=\"languageCodes\" (languageChanged)=\"onLanguageChanged($event)\" [isShowLabel]=\"true\" languageCodes=\"{{languageCodes}}\" [selectedLanguage]=\"selectedLanguage\"></ux-language-selector> <div class=\"ecl-search-form ecl-site-header__search\"> <label class=\"ecl-search-form__textfield-wrapper\"> <span class=\"ecl-u-sr-only\">Search this website</span> <input #search type=\"search\" class=\"ecl-text-input ecl-search-form__textfield\"/> </label> <button class=\"ecl-button ecl-button--form ecl-search-form__button\" (click)=\"searchClicked.emit(search.value)\">Search</button> </div> </div> </header> <ux-layout-page-header [isECL]=\"true\" pageTitle=\"{{identity}}\" [hasECLBreadcrumb]=\"hasBreadcrumb\"></ux-layout-page-header> <ecl-navigation-menu *ngIf=\"menuLinks\" [links]=\"menuLinks\"></ecl-navigation-menu> <main id=\"main-content\"> <div class=\"ecl-container ecl-u-mv-l\"> <router-outlet></router-outlet> </div> </main> <ecl-footers *ngIf=\"footerLinks\" [menus]=\"footerLinks\"></ecl-footers> <ux-growl [value]=\"uxService.growlMessages\" [sticky]=\"uxService.isGrowlSticky\" [life]=\"uxService.growlLife\"></ux-growl> <ux-block-document [isBlocked]=\"uxService.isBlockDocumentActive\"></ux-block-document> </div> "
            },] },
];
/** @nocollapse */
EclLayoutAppShellComponent.ctorParameters = () => [
    { type: UxService, },
    { type: TranslateService, },
];
EclLayoutAppShellComponent.propDecorators = {
    "appHomeUrl": [{ type: Input },],
    "selectedLanguage": [{ type: Input },],
    "identity": [{ type: Input },],
    "footerLinks": [{ type: Input },],
    "menuLinks": [{ type: Input },],
    "languageCodes": [{ type: Input },],
    "hasBreadcrumb": [{ type: Input },],
    "isSearchInputVisible": [{ type: Input },],
    "languageChanged": [{ type: Output },],
    "searchClicked": [{ type: Output },],
    "customTopNavContent": [{ type: ContentChildren, args: [forwardRef(() => EclAppShellTopNavContentTagDirective),] },],
};
class EclAppShellTopNavContentTagDirective {
}
EclAppShellTopNavContentTagDirective.decorators = [
    { type: Directive, args: [{ selector: 'eclAppShellTopNavContent' },] },
];
class EclLayoutAppShellComponentModule {
}
EclLayoutAppShellComponentModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    UxGrowlComponentModule,
                    UxBlockDocumentComponentModule,
                    UxLayoutPageHeaderComponentModule,
                    UxLanguageSelectorComponentModule,
                    EclFootersComponentModule,
                    EclNavigationMenuComponentModule,
                ],
                exports: [
                    EclLayoutAppShellComponent,
                    EclAppShellTopNavContentTagDirective,
                ],
                declarations: [
                    EclLayoutAppShellComponent,
                    EclAppShellTopNavContentTagDirective,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EclAllModule$$1 {
}
EclAllModule$$1.decorators = [
    { type: NgModule, args: [{
                imports: [
                    EclMessagesComponentModule,
                    EclNavigationMenuComponentModule,
                    EclFootersComponentModule,
                    EclButtonComponentModule,
                    EclLabelComponentModule,
                    EclFeaturedItemComponentModule,
                    EclTimelineComponentModule,
                    EclListingComponentModule,
                    EclListingNavigationComponentModule,
                    EclSearchFormComponentModule,
                    EclPageHeaderComponentModule,
                    EclLayoutAppShellComponentModule,
                ],
                declarations: [],
                exports: [
                    EclMessagesComponentModule,
                    EclNavigationMenuComponentModule,
                    EclFootersComponentModule,
                    EclButtonComponentModule,
                    EclLabelComponentModule,
                    EclFeaturedItemComponentModule,
                    EclTimelineComponentModule,
                    EclListingComponentModule,
                    EclListingNavigationComponentModule,
                    EclSearchFormComponentModule,
                    EclPageHeaderComponentModule,
                    EclLayoutAppShellComponentModule,
                ],
                providers: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { EclMessagesComponent, EclMessagesComponentModule, EclNavigationMenuComponent, EclNavigationMenuComponentModule, EclFootersComponent, EclFootersComponentModule, EclButtonComponent, EclButtonComponentModule, EclLabelComponent, EclLabelComponentModule, EclFeaturedItemComponent, EclFeaturedItemComponentModule, EclTimelineComponent, EclTimelineComponentModule, EclListingComponent, EclListingComponentModule, EclListingNavigationComponent, EclListingNavigationComponentModule, EclSearchFormComponent, EclSearchFormComponentModule, EclPageHeaderComponent, EclPageHeaderComponentModule, EclLayoutAppShellComponent, EclAppShellTopNavContentTagDirective, EclLayoutAppShellComponentModule, EclAllModule$$1 as EclAllModule, EclBaseComponent as ɵa };
