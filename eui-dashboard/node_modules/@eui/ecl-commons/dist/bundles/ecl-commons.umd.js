(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('twig'), require('!raw-loader!@ecl/ec-component-label/ec-component-label.twig'), require('!raw-loader!@ecl/ec-component-button/ec-component-button.twig'), require('!raw-loader!@ecl/ec-component-featured-item/ec-component-featured-item.twig'), require('!raw-loader!@ecl/ec-component-meta/ec-component-meta.twig'), require('!raw-loader!@ecl/ec-component-link/ec-component-link.twig'), require('!raw-loader!@ecl/ec-component-message/ec-component-message.twig'), require('!raw-loader!@ecl/ec-component-navigation-menu/ec-component-navigation-menu.twig'), require('!raw-loader!@ecl/ec-component-footer/ec-component-footer.twig'), require('!raw-loader!@ecl/ec-component-timeline/ec-component-timeline.twig'), require('!raw-loader!@ecl/ec-component-listing/ec-component-listing.twig'), require('!raw-loader!@ecl/ec-component-list-item/ec-component-list-item.twig'), require('!raw-loader!@ecl/ec-component-date-block/ec-component-date-block.twig'), require('!raw-loader!@ecl/ec-component-search-form/ec-component-search-form.twig'), require('!raw-loader!@ecl/ec-component-form-text-input/ec-component-form-text-input.twig'), require('!raw-loader!@ecl/ec-component-page-header/ec-component-page-header.twig'), require('!raw-loader!@ecl/ec-component-breadcrumb/ec-component-breadcrumb.twig'), require('!raw-loader!@ecl/ec-style-icon/ec-style-icon.twig'), require('!raw-loader!@ecl/ec-style-image/ec-style-image.twig'), require('!raw-loader!@ecl/generic-component-meta/generic-component-meta.twig'), require('!raw-loader!@ecl/generic-component-label/generic-component-label.twig'), require('!raw-loader!@ecl/generic-component-button/generic-component-button.twig'), require('!raw-loader!@ecl/generic-component-message/generic-component-message.twig'), require('!raw-loader!@ecl/generic-component-footer/generic-component-footer.twig'), require('!raw-loader!@ecl/generic-component-timeline/generic-component-timeline.twig'), require('!raw-loader!@ecl/generic-component-listing/generic-component-listing.twig'), require('!raw-loader!@ecl/generic-component-list-item/generic-component-list-item.twig'), require('!raw-loader!@ecl/generic-component-date-block/generic-component-date-block.twig'), require('!raw-loader!@ecl/generic-component-search-form/generic-component-search-form.twig'), require('!raw-loader!@ecl/generic-component-form-text-input/generic-component-form-text-input.twig'), require('!raw-loader!@ecl/generic-component-page-header/generic-component-page-header.twig'), require('!raw-loader!@ecl/generic-component-breadcrumb/generic-component-breadcrumb.twig'), require('!raw-loader!@ecl/generic-style-image/generic-style-image.twig'), require('@angular/core'), require('@angular/common'), require('@angular/router'), require('@ngx-translate/core'), require('@eui/ux-core'), require('@eui/ux-commons')) :
    typeof define === 'function' && define.amd ? define(['exports', 'twig', '!raw-loader!@ecl/ec-component-label/ec-component-label.twig', '!raw-loader!@ecl/ec-component-button/ec-component-button.twig', '!raw-loader!@ecl/ec-component-featured-item/ec-component-featured-item.twig', '!raw-loader!@ecl/ec-component-meta/ec-component-meta.twig', '!raw-loader!@ecl/ec-component-link/ec-component-link.twig', '!raw-loader!@ecl/ec-component-message/ec-component-message.twig', '!raw-loader!@ecl/ec-component-navigation-menu/ec-component-navigation-menu.twig', '!raw-loader!@ecl/ec-component-footer/ec-component-footer.twig', '!raw-loader!@ecl/ec-component-timeline/ec-component-timeline.twig', '!raw-loader!@ecl/ec-component-listing/ec-component-listing.twig', '!raw-loader!@ecl/ec-component-list-item/ec-component-list-item.twig', '!raw-loader!@ecl/ec-component-date-block/ec-component-date-block.twig', '!raw-loader!@ecl/ec-component-search-form/ec-component-search-form.twig', '!raw-loader!@ecl/ec-component-form-text-input/ec-component-form-text-input.twig', '!raw-loader!@ecl/ec-component-page-header/ec-component-page-header.twig', '!raw-loader!@ecl/ec-component-breadcrumb/ec-component-breadcrumb.twig', '!raw-loader!@ecl/ec-style-icon/ec-style-icon.twig', '!raw-loader!@ecl/ec-style-image/ec-style-image.twig', '!raw-loader!@ecl/generic-component-meta/generic-component-meta.twig', '!raw-loader!@ecl/generic-component-label/generic-component-label.twig', '!raw-loader!@ecl/generic-component-button/generic-component-button.twig', '!raw-loader!@ecl/generic-component-message/generic-component-message.twig', '!raw-loader!@ecl/generic-component-footer/generic-component-footer.twig', '!raw-loader!@ecl/generic-component-timeline/generic-component-timeline.twig', '!raw-loader!@ecl/generic-component-listing/generic-component-listing.twig', '!raw-loader!@ecl/generic-component-list-item/generic-component-list-item.twig', '!raw-loader!@ecl/generic-component-date-block/generic-component-date-block.twig', '!raw-loader!@ecl/generic-component-search-form/generic-component-search-form.twig', '!raw-loader!@ecl/generic-component-form-text-input/generic-component-form-text-input.twig', '!raw-loader!@ecl/generic-component-page-header/generic-component-page-header.twig', '!raw-loader!@ecl/generic-component-breadcrumb/generic-component-breadcrumb.twig', '!raw-loader!@ecl/generic-style-image/generic-style-image.twig', '@angular/core', '@angular/common', '@angular/router', '@ngx-translate/core', '@eui/ux-core', '@eui/ux-commons'], factory) :
    (factory((global.eclCommons = {}),global.Twig,global.ecLabelTpl,global.ecButtonTpl,global.ecFeaturedItemTpl,global.ecMetaTpl,global.ecLinkTpl,global.ecMessageTpl,global.ecNavigationMenuTpl,global.ecFooterTpl,global.ecTimelineTpl,global.ecListingTpl,global.ecListItemTpl,global.ecDateBlockTpl,global.ecSearchFormTpl,global.ecFormTextInputTpl,global.ecPageHeaderTpl,global.ecBreadcrumbTpl,global.ecStyleIconTpl,global.ecStyleImageTpl,global.genericMetaGenericTpl,global.genericLabelTpl,global.genericButtonTpl,global.genericMessageTpl,global.genericFooterTpl,global.genericTimelineTpl,global.genericListingTpl,global.genericListItemTpl,global.genericDateBlockTpl,global.genericSearchFormTpl,global.genericFormTextInputTpl,global.genericPageHeaderTpl,global.genericBreadcrumbTpl,global.genericStyleImageTpl,global.ng.core,global.ng.common,global.ng.router,global['ngx-translate-core'],global['eui-ux-core'],global['eui-ux-commons']));
}(this, (function (exports,Twig,ecLabelTpl,ecButtonTpl,ecFeaturedItemTpl,ecMetaTpl,ecLinkTpl,ecMessageTpl,ecNavigationMenuTpl,ecFooterTpl,ecTimelineTpl,ecListingTpl,ecListItemTpl,ecDateBlockTpl,ecSearchFormTpl,ecFormTextInputTpl,ecPageHeaderTpl,ecBreadcrumbTpl,ecStyleIconTpl,ecStyleImageTpl,genericMetaGenericTpl,genericLabelTpl,genericButtonTpl,genericMessageTpl,genericFooterTpl,genericTimelineTpl,genericListingTpl,genericListItemTpl,genericDateBlockTpl,genericSearchFormTpl,genericFormTextInputTpl,genericPageHeaderTpl,genericBreadcrumbTpl,genericStyleImageTpl,core,common,router,core$1,uxCore,uxCommons) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EclBaseComponent = (function () {
        function EclBaseComponent() {
            Twig.extend(function (T) {
                T.Templates.registerLoader('ecl', function (location, params) {
                    if (location === '@ecl/ec-component-meta') {
                        params.data = ecMetaTpl;
                    }
                    else if (location === '@ecl/ec-component-link') {
                        params.data = ecLinkTpl;
                    }
                    else if (location === '@ecl/ec-component-button') {
                        params.data = ecButtonTpl;
                    }
                    else if (location === '@ecl/ec-component-featured-item') {
                        params.data = ecFeaturedItemTpl;
                    }
                    else if (location === '@ecl/ec-component-label') {
                        params.data = ecLabelTpl;
                    }
                    else if (location === '@ecl/ec-component-message') {
                        params.data = ecMessageTpl;
                    }
                    else if (location === '@ecl/ec-component-navigation-menu') {
                        params.data = ecNavigationMenuTpl;
                    }
                    else if (location === '@ecl/ec-component-footer') {
                        params.data = ecFooterTpl;
                    }
                    else if (location === '@ecl/ec-component-timeline') {
                        params.data = ecTimelineTpl;
                    }
                    else if (location === '@ecl/ec-component-listing') {
                        params.data = ecListingTpl;
                    }
                    else if (location === '@ecl/ec-component-list-item') {
                        params.data = ecListItemTpl;
                    }
                    else if (location === '@ecl/ec-component-date-block') {
                        params.data = ecDateBlockTpl;
                    }
                    else if (location === '@ecl/ec-component-search-form') {
                        params.data = ecSearchFormTpl;
                    }
                    else if (location === '@ecl/ec-component-form-text-input') {
                        params.data = ecFormTextInputTpl;
                    }
                    else if (location === '@ecl/ec-component-page-header') {
                        params.data = ecPageHeaderTpl;
                    }
                    else if (location === '@ecl/ec-component-breadcrumb') {
                        params.data = ecBreadcrumbTpl;
                    }
                    else if (location === '@ecl/ec-style-icon') {
                        params.data = ecStyleIconTpl;
                    }
                    else if (location === '@ecl/ec-style-image') {
                        params.data = ecStyleImageTpl;
                    }
                    else if (location === '@ecl/generic-component-meta') {
                        params.data = genericMetaGenericTpl;
                    }
                    else if (location === '@ecl/generic-component-button') {
                        params.data = genericButtonTpl;
                    }
                    else if (location === '@ecl/generic-component-label') {
                        params.data = genericLabelTpl;
                    }
                    else if (location === '@ecl/generic-component-message') {
                        params.data = genericMessageTpl;
                    }
                    else if (location === '@ecl/generic-component-footer') {
                        params.data = genericFooterTpl;
                    }
                    else if (location === '@ecl/generic-component-timeline') {
                        params.data = genericTimelineTpl;
                    }
                    else if (location === '@ecl/generic-component-listing') {
                        params.data = genericListingTpl;
                    }
                    else if (location === '@ecl/generic-component-list-item') {
                        params.data = genericListItemTpl;
                    }
                    else if (location === '@ecl/generic-component-date-block') {
                        params.data = genericDateBlockTpl;
                    }
                    else if (location === '@ecl/generic-component-search-form') {
                        params.data = genericSearchFormTpl;
                    }
                    else if (location === '@ecl/generic-component-form-text-input') {
                        params.data = genericFormTextInputTpl;
                    }
                    else if (location === '@ecl/generic-component-page-header') {
                        params.data = genericPageHeaderTpl;
                    }
                    else if (location === '@ecl/generic-component-breadcrumb') {
                        params.data = genericBreadcrumbTpl;
                    }
                    else if (location === '@ecl/generic-style-image') {
                        params.data = genericStyleImageTpl;
                    }
                    return new T.Template(params);
                });
            });
        }
        /**
         * @return {?}
         */
        EclBaseComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            Twig.extend(function (T) {
                T.Templates.unRegisterLoader('ecl');
            });
        };
        /**
         * @param {?} templateName
         * @param {?=} data
         * @param {?=} blocks
         * @return {?}
         */
        EclBaseComponent.prototype.renderTemplate = /**
         * @param {?} templateName
         * @param {?=} data
         * @param {?=} blocks
         * @return {?}
         */
        function (templateName, data, blocks) {
            if (blocks === void 0) { blocks = {}; }
            var /** @type {?} */ template = Twig.twig({
                method: 'ecl',
                name: templateName
            });
            return template.render(data, {
                blocks: blocks
            });
        };
        return EclBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} message
     * @return {?}
     */
    function dismissMessage(message) {
        if (message && message.parentNode !== null) {
            message.parentNode.removeChild(message);
        }
    }
    /**
     * @return {?}
     */
    function initMessages() {
        var /** @type {?} */ selectorClass = 'ecl-message__dismiss';
        var /** @type {?} */ messages = Array.prototype.slice.call(document.getElementsByClassName(selectorClass));
        messages.forEach(function (message) {
            return message.addEventListener('click', function () {
                return dismissMessage(message.parentElement);
            });
        });
    }

    var __extends = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclMessagesComponent = (function (_super) {
        __extends(EclMessagesComponent, _super);
        function EclMessagesComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            _this.dismiss = false;
            _this.messages = [];
            return _this;
        }
        /**
         * @return {?}
         */
        EclMessagesComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-message', {
                title: this.title,
                dismiss: this.dismiss,
                messages: this.messages,
                modifier: this.type
            });
            this.vcRef.element.nativeElement.innerHTML = html;
            initMessages();
        };
        EclMessagesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-messages',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        EclMessagesComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclMessagesComponent.propDecorators = {
            "title": [{ type: core.Input },],
            "dismiss": [{ type: core.Input },],
            "type": [{ type: core.Input },],
            "messages": [{ type: core.Input },],
        };
        return EclMessagesComponent;
    }(EclBaseComponent));
    var EclMessagesComponentModule = (function () {
        function EclMessagesComponentModule() {
        }
        EclMessagesComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclMessagesComponent],
                        declarations: [EclMessagesComponent]
                    },] },
        ];
        return EclMessagesComponentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /* eslint-disable no-param-reassign */
    var /** @type {?} */ toggleExpandable = function (toggleElement, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.context, context = _c === void 0 ? document : _c, _d = _b.forceClose, forceClose = _d === void 0 ? false : _d, _e = _b.closeSiblings, closeSiblings = _e === void 0 ? false : _e, _f = _b.siblingsSelector, siblingsSelector = _f === void 0 ? '[aria-controls][aria-expanded]' : _f;
        if (!toggleElement) {
            return;
        }
        // Get target element
        var /** @type {?} */ target = document.getElementById(toggleElement.getAttribute('aria-controls'));
        // Exit if no target found
        if (!target) {
            return;
        }
        // Get current status
        var /** @type {?} */ isExpanded = forceClose === true ||
            toggleElement.getAttribute('aria-expanded') === 'true';
        // Toggle the expandable/collapsible
        toggleElement.setAttribute('aria-expanded', !isExpanded);
        target.setAttribute('aria-hidden', isExpanded + '');
        // Toggle label if possible
        if (!isExpanded && toggleElement.hasAttribute('data-label-expanded')) {
            toggleElement.innerHTML = toggleElement.getAttribute('data-label-expanded');
        }
        else if (isExpanded && toggleElement.hasAttribute('data-label-collapsed')) {
            toggleElement.innerHTML = toggleElement.getAttribute('data-label-collapsed');
        }
        // Close siblings if requested
        if (closeSiblings === true) {
            var /** @type {?} */ siblingsArray = Array.prototype.slice
                .call(context.querySelectorAll(siblingsSelector))
                .filter(function (sibling) { return sibling !== toggleElement; });
            siblingsArray.forEach(function (sibling) {
                toggleExpandable(sibling, {
                    context: context,
                    forceClose: true,
                });
            });
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ queryAll = function (selector, context) {
        if (context === void 0) { context = document; }
        return [].slice.call(context.querySelectorAll(selector));
    };
    var /** @type {?} */ onClick = function (node, menu) {
        return function (e) {
            if (node && node.hasAttribute('aria-haspopup')) {
                var /** @type {?} */ hasPopup = node.getAttribute('aria-haspopup');
                if (hasPopup === '' || hasPopup === 'true') {
                    e.preventDefault();
                    toggleExpandable(node, {
                        context: menu,
                        closeSiblings: true,
                    });
                }
            }
        };
    };
    var /** @type {?} */ onKeydown = function (node, menu) {
        return function (e) {
            var /** @type {?} */ currentTab = node.parentElement;
            var /** @type {?} */ previousTabItem = currentTab.previousElementSibling ||
                currentTab.parentElement.lastElementChild;
            var /** @type {?} */ nextTabItem = currentTab.nextElementSibling || currentTab.parentElement.firstElementChild;
            // don't catch key events when ⌘ or Alt modifier is present
            if (e.metaKey || e.altKey) {
                return;
            }
            // catch left/right and up/down arrow key events
            // if new next/prev tab available, show it by passing tab anchor to showTab method
            switch (e.keyCode) {
                // ENTER or SPACE
                case 13:
                case 32:
                    onClick(e.currentTarget, menu)(e);
                    break;
                // ARROWS LEFT and UP
                case 37:
                case 38:
                    e.preventDefault();
                    previousTabItem.querySelector('a').focus();
                    break;
                // ARROWS RIGHT and DOWN
                case 39:
                case 40:
                    e.preventDefault();
                    nextTabItem.querySelector('a').focus();
                    break;
                default:
                    break;
            }
        };
    };
    var /** @type {?} */ megamenu = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.selector, selector = _c === void 0 ? '.ecl-navigation-menu' : _c, _d = _b.toggleSelector, toggleSelector = _d === void 0 ? '.ecl-navigation-menu__toggle' : _d, _e = _b.listSelector, listSelector = _e === void 0 ? '.ecl-navigation-menu__root' : _e, _f = _b.linkSelector, linkSelector = _f === void 0 ? '.ecl-navigation-menu__link' : _f;
        var /** @type {?} */ megamenusArray = queryAll(selector);
        megamenusArray.forEach(function (menu) {
            // Make the toggle expandable
            var /** @type {?} */ toggle = menu.querySelector(toggleSelector);
            if (toggle) {
                toggle.addEventListener('click', function () {
                    return toggleExpandable(toggle, { context: menu });
                });
            }
            // Get the list of links
            var /** @type {?} */ list = menu.querySelector(listSelector);
            // Get expandables within the list
            var /** @type {?} */ nodesArray = queryAll(linkSelector, list);
            nodesArray.forEach(function (node) {
                node.addEventListener('click', onClick(node, list));
                node.addEventListener('keydown', onKeydown(node, list));
            });
        });
    };

    var __extends$1 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclNavigationMenuComponent = (function (_super) {
        __extends$1(EclNavigationMenuComponent, _super);
        function EclNavigationMenuComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            _this.links = [];
            return _this;
        }
        /**
         * @return {?}
         */
        EclNavigationMenuComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-navigation-menu', {
                label: this.label,
                links: this.links
            });
            this.vcRef.element.nativeElement.innerHTML = html;
            megamenu();
        };
        EclNavigationMenuComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-navigation-menu',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        EclNavigationMenuComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclNavigationMenuComponent.propDecorators = {
            "label": [{ type: core.Input },],
            "links": [{ type: core.Input },],
        };
        return EclNavigationMenuComponent;
    }(EclBaseComponent));
    var EclNavigationMenuComponentModule = (function () {
        function EclNavigationMenuComponentModule() {
        }
        EclNavigationMenuComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclNavigationMenuComponent],
                        declarations: [EclNavigationMenuComponent]
                    },] },
        ];
        return EclNavigationMenuComponentModule;
    }());

    var __extends$2 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclFootersComponent = (function (_super) {
        __extends$2(EclFootersComponent, _super);
        function EclFootersComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            return _this;
        }
        /**
         * @return {?}
         */
        EclFootersComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-footer', this.menus);
            this.vcRef.element.nativeElement.innerHTML = html;
        };
        EclFootersComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-footers',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        EclFootersComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclFootersComponent.propDecorators = {
            "menus": [{ type: core.Input },],
        };
        return EclFootersComponent;
    }(EclBaseComponent));
    var EclFootersComponentModule = (function () {
        function EclFootersComponentModule() {
        }
        EclFootersComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclFootersComponent],
                        declarations: [EclFootersComponent]
                    },] },
        ];
        return EclFootersComponentModule;
    }());

    var __extends$3 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclButtonComponent = (function (_super) {
        __extends$3(EclButtonComponent, _super);
        function EclButtonComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            return _this;
        }
        /**
         * @return {?}
         */
        EclButtonComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-button', {
                label: this.label,
                modifier: this.modifier,
                icon: this.icon,
                is_block: this.isBlock,
                extra_classes: this.styleClass,
                extra_attributes: this.extraAttributes
            });
            this.vcRef.element.nativeElement.innerHTML = html;
        };
        EclButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-button',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        EclButtonComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclButtonComponent.propDecorators = {
            "label": [{ type: core.Input },],
            "modifier": [{ type: core.Input },],
            "icon": [{ type: core.Input },],
            "isBlock": [{ type: core.Input },],
            "styleClass": [{ type: core.Input },],
            "extraAttributes": [{ type: core.Input },],
        };
        return EclButtonComponent;
    }(EclBaseComponent));
    var EclButtonComponentModule = (function () {
        function EclButtonComponentModule() {
        }
        EclButtonComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclButtonComponent],
                        declarations: [EclButtonComponent]
                    },] },
        ];
        return EclButtonComponentModule;
    }());

    var __extends$4 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclLabelComponent = (function (_super) {
        __extends$4(EclLabelComponent, _super);
        function EclLabelComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            return _this;
        }
        /**
         * @return {?}
         */
        EclLabelComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-label', {
                status: this.status,
                body: this.body
            });
            this.vcRef.element.nativeElement.innerHTML = html;
        };
        EclLabelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-label',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        EclLabelComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclLabelComponent.propDecorators = {
            "status": [{ type: core.Input },],
            "body": [{ type: core.Input },],
        };
        return EclLabelComponent;
    }(EclBaseComponent));
    var EclLabelComponentModule = (function () {
        function EclLabelComponentModule() {
        }
        EclLabelComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclLabelComponent],
                        declarations: [EclLabelComponent]
                    },] },
        ];
        return EclLabelComponentModule;
    }());

    var __extends$5 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclFeaturedItemComponent = (function (_super) {
        __extends$5(EclFeaturedItemComponent, _super);
        function EclFeaturedItemComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            _this.contentSelector = '.ecl-link';
            return _this;
        }
        /**
         * @return {?}
         */
        EclFeaturedItemComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ hostEl = this.vcRef.element.nativeElement;
            var /** @type {?} */ body = this.content.nativeElement.innerHTML;
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-featured-item', {
                variant: this.variant,
                image: {
                    src: this.imageSrc,
                    alt: this.imageAlt
                },
                metas: this.metas,
                title: this.title,
                link: {
                    href: this.linkHref,
                    label: this.linkLabel
                }
            }, { body: '' });
            hostEl.innerHTML = html;
            hostEl.querySelector(this.contentSelector)
                .insertAdjacentElement('afterend', this.content.nativeElement);
        };
        EclFeaturedItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-featured-item',
                        template: "<span #content><ng-content></ng-content></span>"
                    },] },
        ];
        /** @nocollapse */
        EclFeaturedItemComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclFeaturedItemComponent.propDecorators = {
            "variant": [{ type: core.Input },],
            "title": [{ type: core.Input },],
            "imageSrc": [{ type: core.Input },],
            "imageAlt": [{ type: core.Input },],
            "metas": [{ type: core.Input },],
            "linkHref": [{ type: core.Input },],
            "linkLabel": [{ type: core.Input },],
            "content": [{ type: core.ViewChild, args: ['content',] },],
        };
        return EclFeaturedItemComponent;
    }(EclBaseComponent));
    var EclFeaturedItemComponentModule = (function () {
        function EclFeaturedItemComponentModule() {
        }
        EclFeaturedItemComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclFeaturedItemComponent],
                        declarations: [EclFeaturedItemComponent]
                    },] },
        ];
        return EclFeaturedItemComponentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Timeline
     */
    var /** @type {?} */ expandTimeline = function (timeline, button, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.classToRemove, classToRemove = _c === void 0 ? 'ecl-timeline__item--over-limit' : _c, _d = _b.hiddenElementsSelector, hiddenElementsSelector = _d === void 0 ? '.ecl-timeline__item--over-limit' : _d;
        if (!timeline) {
            return;
        }
        var /** @type {?} */ hiddenElements = Array.prototype.slice.call(timeline.querySelectorAll(hiddenElementsSelector));
        // Remove extra class
        hiddenElements.forEach(function (element) {
            element.classList.remove(classToRemove);
        });
        // Remove buttton
        button.parentNode.removeChild(button);
    };
    // Helper method to automatically attach the event listener to all the expandables on page load
    var /** @type {?} */ timelines = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.selector, selector = _c === void 0 ? '.ecl-timeline' : _c, _d = _b.buttonSelector, buttonSelector = _d === void 0 ? '.ecl-timeline__button' : _d, _e = _b.hiddenElementsSelector, hiddenElementsSelector = _e === void 0 ? '.ecl-timeline__item--over-limit' : _e, _f = _b.classToRemove, classToRemove = _f === void 0 ? 'ecl-timeline__item--over-limit' : _f, _g = _b.context, context = _g === void 0 ? document : _g;
        var /** @type {?} */ nodesArray = Array.prototype.slice.call(context.querySelectorAll(selector));
        nodesArray.forEach(function (node) {
            var /** @type {?} */ button = context.querySelector(buttonSelector);
            if (button) {
                button.addEventListener('click', function () {
                    return expandTimeline(node, button, { classToRemove: classToRemove, hiddenElementsSelector: hiddenElementsSelector });
                });
            }
        });
    };

    var __extends$6 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclTimelineComponent = (function (_super) {
        __extends$6(EclTimelineComponent, _super);
        function EclTimelineComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            return _this;
        }
        /**
         * @return {?}
         */
        EclTimelineComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-timeline', {
                limit: this.limit,
                button_label: this.buttonLabel,
                items: this.items
            });
            this.vcRef.element.nativeElement.innerHTML = html;
            timelines();
        };
        EclTimelineComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-timeline',
                        template: ""
                    },] },
        ];
        /** @nocollapse */
        EclTimelineComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclTimelineComponent.propDecorators = {
            "limit": [{ type: core.Input },],
            "buttonLabel": [{ type: core.Input },],
            "items": [{ type: core.Input },],
        };
        return EclTimelineComponent;
    }(EclBaseComponent));
    var EclTimelineComponentModule = (function () {
        function EclTimelineComponentModule() {
        }
        EclTimelineComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclTimelineComponent],
                        declarations: [EclTimelineComponent]
                    },] },
        ];
        return EclTimelineComponentModule;
    }());

    var __extends$7 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclListingComponent = (function (_super) {
        __extends$7(EclListingComponent, _super);
        function EclListingComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            return _this;
        }
        /**
         * @return {?}
         */
        EclListingComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-listing', {
                variant: this.variant,
                items: this.items
            });
            this.vcRef.element.nativeElement.innerHTML = html;
        };
        EclListingComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-listing',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        EclListingComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclListingComponent.propDecorators = {
            "variant": [{ type: core.Input },],
            "items": [{ type: core.Input },],
        };
        return EclListingComponent;
    }(EclBaseComponent));
    var EclListingComponentModule = (function () {
        function EclListingComponentModule() {
        }
        EclListingComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclListingComponent],
                        declarations: [EclListingComponent]
                    },] },
        ];
        return EclListingComponentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EclListingNavigationComponent = (function () {
        function EclListingNavigationComponent() {
        }
        EclListingNavigationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-listing-navigation',
                        template: "<div class=\"ecl-listing-navigation\"> <h3 class=\"ecl-listing-navigation__title\"> <a [attr.href]=\"url || externalUrl\" [attr.target]=\"externalUrl ? '_blank' : null\" class=\"ecl-listing-navigation__link\">{{ title }}</a> </h3> <div *ngIf=\"description\" class=\"ecl-listing-navigation__description\">{{ description }}</div> <ul *ngIf=\"links\" class=\"ecl-listing-navigation__items\"> <li *ngFor=\"let link of links\" class=\"ecl-listing-navigation__item\"> <a *ngIf=\"!link.isSeparator\" [attr.href]=\"link.url || link.externalUrl\" [attr.target]=\"link.externalUrl ? '_blank' : null\" class=\"ecl-listing-navigation__link\">{{ link.label }}</a> <hr *ngIf=\"link.isSeparator\" class=\"ecl-listing-navigation__separator\"/> </li> </ul> </div>",
                        styles: [".ecl-listing-navigation{border-top:3px solid #ffd617;margin-bottom:1rem}.ecl-listing-navigation__title{font-weight:bold;font-size:1.125rem;margin-top:1rem;margin-bottom:1.5rem}.ecl-listing-navigation__description{margin-bottom:0.75rem}.ecl-listing-navigation__item{padding-bottom:0.5rem}.ecl-listing-navigation__separator{margin:0.5rem 0;border-top:1px solid #9f9f9f} /*# sourceMappingURL=ecl-listing-navigation.component.css.map */"]
                    },] },
        ];
        /** @nocollapse */
        EclListingNavigationComponent.propDecorators = {
            "title": [{ type: core.Input },],
            "url": [{ type: core.Input },],
            "externalUrl": [{ type: core.Input },],
            "description": [{ type: core.Input },],
            "links": [{ type: core.Input },],
        };
        return EclListingNavigationComponent;
    }());
    var EclListingNavigationComponentModule = (function () {
        function EclListingNavigationComponentModule() {
        }
        EclListingNavigationComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclListingNavigationComponent],
                        declarations: [EclListingNavigationComponent]
                    },] },
        ];
        return EclListingNavigationComponentModule;
    }());

    var __extends$8 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclSearchFormComponent = (function (_super) {
        __extends$8(EclSearchFormComponent, _super);
        function EclSearchFormComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            return _this;
        }
        /**
         * @return {?}
         */
        EclSearchFormComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-search-form', {
                ariaLabel: this.ariaLabel,
                button: this.button,
                input: this.input
            });
            this.vcRef.element.nativeElement.innerHTML = html;
        };
        EclSearchFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-search-form',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        EclSearchFormComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclSearchFormComponent.propDecorators = {
            "ariaLabel": [{ type: core.Input },],
            "button": [{ type: core.Input },],
            "input": [{ type: core.Input },],
        };
        return EclSearchFormComponent;
    }(EclBaseComponent));
    var EclSearchFormComponentModule = (function () {
        function EclSearchFormComponentModule() {
        }
        EclSearchFormComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclSearchFormComponent],
                        declarations: [EclSearchFormComponent]
                    },] },
        ];
        return EclSearchFormComponentModule;
    }());

    var __extends$9 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var EclPageHeaderComponent = (function (_super) {
        __extends$9(EclPageHeaderComponent, _super);
        function EclPageHeaderComponent(vcRef) {
            var _this = _super.call(this) || this;
            _this.vcRef = vcRef;
            return _this;
        }
        /**
         * @return {?}
         */
        EclPageHeaderComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ html = _super.prototype.renderTemplate.call(this, '@ecl/ec-component-page-header', {
                identity: this.identity,
                breadcrumb: this.breadcrumb
            });
            this.vcRef.element.nativeElement.innerHTML = html;
        };
        EclPageHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-page-header',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        EclPageHeaderComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef, },
        ]; };
        EclPageHeaderComponent.propDecorators = {
            "identity": [{ type: core.Input },],
            "breadcrumb": [{ type: core.Input },],
        };
        return EclPageHeaderComponent;
    }(EclBaseComponent));
    var EclPageHeaderComponentModule = (function () {
        function EclPageHeaderComponentModule() {
        }
        EclPageHeaderComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [EclPageHeaderComponent],
                        declarations: [EclPageHeaderComponent]
                    },] },
        ];
        return EclPageHeaderComponentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EclLayoutAppShellComponent = (function () {
        function EclLayoutAppShellComponent(uxService, translateService) {
            this.uxService = uxService;
            this.translateService = translateService;
            // GLOBAL
            this.appHomeUrl = '/screen/home';
            this.footerLinks = [];
            this.menuLinks = [];
            this.languageCodes = '';
            this.hasBreadcrumb = false;
            this.isSearchInputVisible = false;
            this.languageChanged = new core.EventEmitter();
            this.searchClicked = new core.EventEmitter();
        }
        Object.defineProperty(EclLayoutAppShellComponent.prototype, "activeLanguageCode", {
            get: /**
             * @return {?}
             */
            function () {
                return this.selectedLanguage && this.selectedLanguage.code || this.translateService.currentLang;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} language
         * @return {?}
         */
        EclLayoutAppShellComponent.prototype.onLanguageChanged = /**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            this.languageChanged.emit(language);
        };
        EclLayoutAppShellComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ecl-layout-app-shell',
                        template: "<div id=\"app-wrapper\" class=\"ux-t-ecl ecl-typography language-{{activeLanguageCode}}\"> <header class=\"ecl-site-header\" role=\"banner\"> <div class=\"ecl-container\"> <nav class=\"ecl-navigation-list-wrapper ecl-u-f-r\"> <h2 class=\"ecl-u-sr-only\">User menu</h2> <ng-content select=\"eclAppShellTopNavContent\"></ng-content> </nav> </div> <div class=\"ecl-site-switcher ecl-site-switcher--header\"> <div class=\"ecl-container\"> </div> </div> <div class=\"ecl-container ecl-site-header__banner\"> <a href=\"https://ec.europa.eu\" class=\"ecl-logo ecl-logo--logotype ecl-site-header__logo\" title=\"Home - European Commission\"> <span class=\"ecl-u-sr-only\">Home - European Commission</span> </a> <ux-language-selector *ngIf=\"languageCodes\" (languageChanged)=\"onLanguageChanged($event)\" [isShowLabel]=\"true\" languageCodes=\"{{languageCodes}}\" [selectedLanguage]=\"selectedLanguage\"></ux-language-selector> <div class=\"ecl-search-form ecl-site-header__search\"> <label class=\"ecl-search-form__textfield-wrapper\"> <span class=\"ecl-u-sr-only\">Search this website</span> <input #search type=\"search\" class=\"ecl-text-input ecl-search-form__textfield\"/> </label> <button class=\"ecl-button ecl-button--form ecl-search-form__button\" (click)=\"searchClicked.emit(search.value)\">Search</button> </div> </div> </header> <ux-layout-page-header [isECL]=\"true\" pageTitle=\"{{identity}}\" [hasECLBreadcrumb]=\"hasBreadcrumb\"></ux-layout-page-header> <ecl-navigation-menu *ngIf=\"menuLinks\" [links]=\"menuLinks\"></ecl-navigation-menu> <main id=\"main-content\"> <div class=\"ecl-container ecl-u-mv-l\"> <router-outlet></router-outlet> </div> </main> <ecl-footers *ngIf=\"footerLinks\" [menus]=\"footerLinks\"></ecl-footers> <ux-growl [value]=\"uxService.growlMessages\" [sticky]=\"uxService.isGrowlSticky\" [life]=\"uxService.growlLife\"></ux-growl> <ux-block-document [isBlocked]=\"uxService.isBlockDocumentActive\"></ux-block-document> </div> "
                    },] },
        ];
        /** @nocollapse */
        EclLayoutAppShellComponent.ctorParameters = function () { return [
            { type: uxCore.UxService, },
            { type: core$1.TranslateService, },
        ]; };
        EclLayoutAppShellComponent.propDecorators = {
            "appHomeUrl": [{ type: core.Input },],
            "selectedLanguage": [{ type: core.Input },],
            "identity": [{ type: core.Input },],
            "footerLinks": [{ type: core.Input },],
            "menuLinks": [{ type: core.Input },],
            "languageCodes": [{ type: core.Input },],
            "hasBreadcrumb": [{ type: core.Input },],
            "isSearchInputVisible": [{ type: core.Input },],
            "languageChanged": [{ type: core.Output },],
            "searchClicked": [{ type: core.Output },],
            "customTopNavContent": [{ type: core.ContentChildren, args: [core.forwardRef(function () {
                            return EclAppShellTopNavContentTagDirective;
                        }),] },],
        };
        return EclLayoutAppShellComponent;
    }());
    var EclAppShellTopNavContentTagDirective = (function () {
        function EclAppShellTopNavContentTagDirective() {
        }
        EclAppShellTopNavContentTagDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'eclAppShellTopNavContent' },] },
        ];
        return EclAppShellTopNavContentTagDirective;
    }());
    var EclLayoutAppShellComponentModule = (function () {
        function EclLayoutAppShellComponentModule() {
        }
        EclLayoutAppShellComponentModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            uxCommons.UxGrowlComponentModule,
                            uxCommons.UxBlockDocumentComponentModule,
                            uxCommons.UxLayoutPageHeaderComponentModule,
                            uxCommons.UxLanguageSelectorComponentModule,
                            EclFootersComponentModule,
                            EclNavigationMenuComponentModule,
                        ],
                        exports: [
                            EclLayoutAppShellComponent,
                            EclAppShellTopNavContentTagDirective,
                        ],
                        declarations: [
                            EclLayoutAppShellComponent,
                            EclAppShellTopNavContentTagDirective,
                        ]
                    },] },
        ];
        return EclLayoutAppShellComponentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EclAllModule$$1 = (function () {
        function EclAllModule$$1() {
        }
        EclAllModule$$1.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            EclMessagesComponentModule,
                            EclNavigationMenuComponentModule,
                            EclFootersComponentModule,
                            EclButtonComponentModule,
                            EclLabelComponentModule,
                            EclFeaturedItemComponentModule,
                            EclTimelineComponentModule,
                            EclListingComponentModule,
                            EclListingNavigationComponentModule,
                            EclSearchFormComponentModule,
                            EclPageHeaderComponentModule,
                            EclLayoutAppShellComponentModule,
                        ],
                        declarations: [],
                        exports: [
                            EclMessagesComponentModule,
                            EclNavigationMenuComponentModule,
                            EclFootersComponentModule,
                            EclButtonComponentModule,
                            EclLabelComponentModule,
                            EclFeaturedItemComponentModule,
                            EclTimelineComponentModule,
                            EclListingComponentModule,
                            EclListingNavigationComponentModule,
                            EclSearchFormComponentModule,
                            EclPageHeaderComponentModule,
                            EclLayoutAppShellComponentModule,
                        ],
                        providers: []
                    },] },
        ];
        return EclAllModule$$1;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.EclMessagesComponent = EclMessagesComponent;
    exports.EclMessagesComponentModule = EclMessagesComponentModule;
    exports.EclNavigationMenuComponent = EclNavigationMenuComponent;
    exports.EclNavigationMenuComponentModule = EclNavigationMenuComponentModule;
    exports.EclFootersComponent = EclFootersComponent;
    exports.EclFootersComponentModule = EclFootersComponentModule;
    exports.EclButtonComponent = EclButtonComponent;
    exports.EclButtonComponentModule = EclButtonComponentModule;
    exports.EclLabelComponent = EclLabelComponent;
    exports.EclLabelComponentModule = EclLabelComponentModule;
    exports.EclFeaturedItemComponent = EclFeaturedItemComponent;
    exports.EclFeaturedItemComponentModule = EclFeaturedItemComponentModule;
    exports.EclTimelineComponent = EclTimelineComponent;
    exports.EclTimelineComponentModule = EclTimelineComponentModule;
    exports.EclListingComponent = EclListingComponent;
    exports.EclListingComponentModule = EclListingComponentModule;
    exports.EclListingNavigationComponent = EclListingNavigationComponent;
    exports.EclListingNavigationComponentModule = EclListingNavigationComponentModule;
    exports.EclSearchFormComponent = EclSearchFormComponent;
    exports.EclSearchFormComponentModule = EclSearchFormComponentModule;
    exports.EclPageHeaderComponent = EclPageHeaderComponent;
    exports.EclPageHeaderComponentModule = EclPageHeaderComponentModule;
    exports.EclLayoutAppShellComponent = EclLayoutAppShellComponent;
    exports.EclAppShellTopNavContentTagDirective = EclAppShellTopNavContentTagDirective;
    exports.EclLayoutAppShellComponentModule = EclLayoutAppShellComponentModule;
    exports.EclAllModule = EclAllModule$$1;
    exports.ɵa = EclBaseComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
